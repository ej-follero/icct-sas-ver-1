generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId              Int            @id @default(autoincrement())
  userName            String
  email               String         @unique @db.VarChar(100)
  passwordHash        String         @db.VarChar(255)
  role                Role
  status              UserStatus     @default(ACTIVE)
  lastLogin           DateTime?
  lastPasswordChange  DateTime?
  failedLoginAttempts Int            @default(0)
  isEmailVerified     Boolean        @default(false)
  isPhoneVerified     Boolean        @default(false)
  twoFactorEnabled    Boolean        @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  sessionVersion      Int            @default(1)
  Announcements       Announcement[]
  attendanceOverrides Attendance[]   @relation("AttendanceOverride")
  Attendance          Attendance[]
  VerifiedAttendances Attendance[]   @relation("AttendanceVerification")
  DepartmentHead      Department[]   @relation("DepartmentHead")
  Event               Event[]
  Guardian            Guardian?
  Instructor          Instructor?
  RFIDLogs            RFIDLogs[]
  AssignedTags        RFIDTags[]     @relation("TagAssignment")
  ReportLogs          ReportLog[]
  Student             Student[]
  SystemLogs          SystemLogs[]
  PasswordResetTokens PasswordResetToken[]

  @@index([email])
  @@index([role, status])
  @@index([lastLogin])
}

model Student {
  studentId               Int                      @id @default(autoincrement())
  studentIdNum            String                   @unique
  rfidTag                 String                   @unique
  firstName               String
  middleName              String?
  lastName                String
  suffix                  String?
  email                   String                   @unique
  phoneNumber             String                   @unique
  address                 String
  img                     String?
  gender                  UserGender
  birthDate               DateTime?
  nationality             String?
  studentType             StudentType
  status                  Status                   @default(ACTIVE)
  yearLevel               yearLevel
  courseId                Int?
  departmentId            Int?
  lastLogin               DateTime?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  guardianId              Int
  userId                  Int
  Attendance              Attendance[]             @relation("StudentToAttendance")
  attendanceNotifications AttendanceNotification[]
  RFIDTags                RFIDTags?
  CourseOffering          CourseOffering?          @relation(fields: [courseId], references: [courseId])
  Department              Department?              @relation(fields: [departmentId], references: [departmentId])
  Guardian                Guardian                 @relation(fields: [guardianId], references: [guardianId])
  User                    User                     @relation(fields: [userId], references: [userId])
  StudentSchedules        StudentSchedule[]
  StudentSection          StudentSection[]

  @@index([studentIdNum])
  @@index([rfidTag])
  @@index([courseId, yearLevel])
  @@index([departmentId, status])
  @@index([studentType, status])
}

model Guardian {
  guardianId              Int          @id @default(autoincrement())
  email                   String       @unique
  phoneNumber             String       @unique
  firstName               String
  middleName              String?
  lastName                String
  suffix                  String?
  address                 String
  img                     String?
  gender                  UserGender
  guardianType            GuardianType
  status                  Status       @default(ACTIVE)
  occupation              String?
  workplace               String?
  emergencyContact        String?
  relationshipToStudent   String
  totalStudents           Int          @default(0)
  lastLogin               DateTime?
  notificationPreferences Json?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  User                    User         @relation(fields: [guardianId], references: [userId])
  Student                 Student[]

  @@index([guardianType, status])
  @@index([email])
  @@index([phoneNumber])
}

model Instructor {
  instructorId    Int               @id @default(autoincrement())
  email           String            @unique
  phoneNumber     String            @unique
  firstName       String
  middleName      String
  lastName        String
  suffix          String?
  img             String?
  gender          UserGender
  instructorType  InstructorType
  status          Status            @default(ACTIVE)
  departmentId    Int
  officeLocation  String?
  officeHours     String?
  specialization  String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  rfidTag         String            @unique
  Announcements   Announcement[]    @relation("InstructorToAnnouncements")
  Attendance      Attendance[]      @relation("InstructorToAttendance")
  Department      Department        @relation(fields: [departmentId], references: [departmentId])
  User            User              @relation(fields: [instructorId], references: [userId])
  RFIDTags        RFIDTags?
  SubjectSchedule SubjectSchedule[]
  Subjects        Subjects[]        @relation("InstructorToSubjects")

  @@index([departmentId, status])
  @@index([instructorType])
  @@index([rfidTag])
}

model Room {
  roomId          Int               @id @default(autoincrement())
  roomNo          String            @unique
  roomType        RoomType
  roomCapacity    Int
  roomBuildingLoc RoomBuilding      // restore to required
  roomFloorLoc    RoomFloor         // restore to required
  readerId        String            @unique
  status          RoomStatus        @default(AVAILABLE)
  isActive        Boolean           @default(true)
  lastMaintenance DateTime?
  nextMaintenance DateTime?
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  RFIDReader      RFIDReader?
  SubjectSchedule SubjectSchedule[]

  @@index([roomNo])
  @@index([roomType, status])
  @@index([roomBuildingLoc, roomFloorLoc])
  @@index([readerId])
}

model Semester {
  semesterId        Int               @id @default(autoincrement())
  startDate         DateTime
  endDate           DateTime
  year              Int
  semesterType      SemesterType
  status            SemesterStatus    @default(UPCOMING)
  registrationStart DateTime?
  registrationEnd   DateTime?
  enrollmentStart   DateTime?
  enrollmentEnd     DateTime?
  isActive          Boolean           @default(false)
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  Attendance        Attendance[]      @relation("SemesterToAttendance")
  CourseOfferings   CourseOffering[]
  Sections          Section[]
  SubjectSchedules  SubjectSchedule[]

  @@index([year, semesterType])
  @@index([status])
  @@index([startDate, endDate])
}

model StudentSection {
  studentSectionId Int              @default(autoincrement())
  studentId        Int
  sectionId        Int
  enrollmentStatus EnrollmentStatus @default(ACTIVE)
  enrollmentDate   DateTime         @default(now())
  dropDate         DateTime?
  isRegular        Boolean          @default(true)
  notes            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  Section          Section          @relation(fields: [sectionId], references: [sectionId])
  Student          Student          @relation(fields: [studentId], references: [studentId])

  @@id([studentId, sectionId])
  @@index([studentId, enrollmentStatus])
  @@index([sectionId, enrollmentStatus])
  @@index([enrollmentDate])
}

model Section {
  sectionId         Int               @id @default(autoincrement())
  sectionName       String            @unique
  sectionType       SectionType
  sectionCapacity   Int
  sectionStatus     SectionStatus
  yearLevel         Int
  academicYear      String
  semester          SemesterType
  currentEnrollment Int               @default(0)
  roomAssignment    String?
  scheduleNotes     String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  courseId          Int
  semesterId        Int
  Announcement      Announcement[]
  Course            CourseOffering    @relation(fields: [courseId], references: [courseId])
  Semester          Semester          @relation(fields: [semesterId], references: [semesterId])
  StudentSection    StudentSection[]
  SubjectSchedule   SubjectSchedule[]

  @@index([sectionName])
  @@index([courseId, sectionStatus])
  @@index([yearLevel, academicYear])
}

model CourseOffering {
  courseId     Int          @id @default(autoincrement())
  courseCode   String       @unique
  courseName   String
  courseType   CourseType
  courseStatus CourseStatus @default(ACTIVE)
  description  String?
  departmentId Int
  academicYear String
  semester     SemesterType
  totalUnits   Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  semesterId   Int
  major        String?
  Department   Department   @relation(fields: [departmentId], references: [departmentId])
  Semester     Semester     @relation(fields: [semesterId], references: [semesterId])
  Section      Section[]
  Student      Student[]
  Subjects     Subjects[]

  @@index([courseCode])
  @@index([departmentId, courseStatus])
  @@index([academicYear, semester])
}

model Department {
  departmentId          Int              @id @default(autoincrement())
  departmentName        String
  departmentCode        String           @unique
  departmentType        DepartmentType   @default(ACADEMIC)
  departmentDescription String
  departmentStatus      Status           @default(ACTIVE)
  headOfDepartment      Int?
  location              String?
  contactEmail          String?
  contactPhone          String?
  departmentLogo        String?          // URL or path to department logo image
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  CourseOffering        CourseOffering[]
  head                  User?            @relation("DepartmentHead", fields: [headOfDepartment], references: [userId])
  Instructor            Instructor[]
  Student               Student[]
  Subjects              Subjects[]

  @@index([departmentCode])
  @@index([departmentType, departmentStatus])
  @@index([headOfDepartment])
}

model Subjects {
  subjectId       Int               @id @default(autoincrement())
  subjectName     String
  subjectCode     String            @unique
  subjectType     SubjectType       @default(LECTURE)
  status          SubjectStatus     @default(ACTIVE)
  description     String?
  lectureUnits    Int               @default(0)
  labUnits        Int               @default(0)
  creditedUnits   Int               @default(0)
  totalHours      Int
  prerequisites   String?
  courseId        Int
  departmentId    Int
  academicYear    String
  semester        SemesterType
  maxStudents     Int               @default(30)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Announcement    Announcement[]
  SubjectSchedule SubjectSchedule[]
  CourseOffering  CourseOffering    @relation(fields: [courseId], references: [courseId])
  Department      Department        @relation(fields: [departmentId], references: [departmentId])
  Instructor      Instructor[]      @relation("InstructorToSubjects")

  @@index([subjectCode])
  @@index([courseId, status])
  @@index([departmentId, status])
  @@index([academicYear, semester])
}

model SubjectSchedule {
  subjectSchedId  Int               @id @default(autoincrement())
  subjectId       Int
  sectionId       Int
  instructorId    Int
  roomId          Int
  day             DayOfWeek
  startTime       String
  endTime         String
  slots           Int               @default(0)
  scheduleType    ScheduleType      @default(REGULAR)
  status          ScheduleStatus    @default(ACTIVE)
  semesterId      Int
  academicYear    String
  isRecurring     Boolean           @default(true)
  startDate       DateTime?
  endDate         DateTime?
  maxStudents     Int               @default(30)
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Attendance      Attendance[]      @relation("SubjectScheduleToAttendance")
  StudentSchedule StudentSchedule[]
  instructor      Instructor        @relation(fields: [instructorId], references: [instructorId])
  room            Room              @relation(fields: [roomId], references: [roomId])
  section         Section           @relation(fields: [sectionId], references: [sectionId])
  semester        Semester          @relation(fields: [semesterId], references: [semesterId])
  subject         Subjects          @relation(fields: [subjectId], references: [subjectId])

  @@index([subjectId, day, startTime])
  @@index([instructorId, day, startTime])
  @@index([roomId, day, startTime])
  @@index([sectionId, status])
  @@index([semesterId, academicYear])
}

model StudentSchedule {
  id         Int             @id @default(autoincrement())
  studentId  Int
  scheduleId Int
  status     ScheduleStatus  @default(ACTIVE)
  enrolledAt DateTime        @default(now())
  droppedAt  DateTime?
  notes      String?
  schedule   SubjectSchedule @relation(fields: [scheduleId], references: [subjectSchedId])
  student    Student         @relation(fields: [studentId], references: [studentId])

  @@unique([studentId, scheduleId])
  @@index([studentId, status])
  @@index([scheduleId, status])
}

model Attendance {
  attendanceId            Int                      @id @default(autoincrement())
  eventId                 Int?
  userId                  Int
  userRole                Role
  status                  AttendanceStatus
  attendanceType          AttendanceType
  verification            AttendanceVerification   @default(PENDING)
  timestamp               DateTime                 @default(now())
  checkOutTime            DateTime?
  duration                Int?
  notes                   String?
  deviceInfo              Json?
  location                String?
  verifiedBy              Int?
  verificationTime        DateTime?
  verificationNotes       String?
  academicYear            String?
  instructorId            Int?
  originalStatus          AttendanceStatus?
  overrideBy              Int?
  overrideReason          String?
  rfidLogId               Int?                     @unique
  semesterId              Int?
  studentId               Int?
  subjectSchedId          Int?
  event                   Event?                   @relation(fields: [eventId], references: [eventId], onDelete: Cascade)
  instructor              Instructor?              @relation("InstructorToAttendance", fields: [instructorId], references: [instructorId])
  overrideUser            User?                    @relation("AttendanceOverride", fields: [overrideBy], references: [userId])
  rfidLog                 RFIDLogs?                @relation(fields: [rfidLogId], references: [logsId])
  semester                Semester?                @relation("SemesterToAttendance", fields: [semesterId], references: [semesterId])
  student                 Student?                 @relation("StudentToAttendance", fields: [studentId], references: [studentId])
  subjectSchedule         SubjectSchedule?         @relation("SubjectScheduleToAttendance", fields: [subjectSchedId], references: [subjectSchedId])
  user                    User                     @relation(fields: [userId], references: [userId])
  verifier                User?                    @relation("AttendanceVerification", fields: [verifiedBy], references: [userId])
  attendanceNotifications AttendanceNotification[]

  @@unique([studentId, subjectSchedId, timestamp])
  @@index([userId, timestamp])
  @@index([eventId, timestamp])
  @@index([subjectSchedId, timestamp])
  @@index([studentId])
  @@index([instructorId])
  @@index([semesterId])
  @@index([status, verification])
  @@index([attendanceType, timestamp])
  @@index([rfidLogId])
  @@index([studentId, subjectSchedId, timestamp])
}

model Event {
  eventId              Int          @id @default(autoincrement())
  createdBy            Int
  title                String
  description          String
  eventType            EventType
  eventDate            DateTime
  endDate              DateTime?
  location             String?
  capacity             Int?
  registeredCount      Int          @default(0)
  isPublic             Boolean      @default(true)
  requiresRegistration Boolean      @default(false)
  status               EventStatus  @default(DRAFT)
  priority             Priority     @default(NORMAL)
  imageUrl             String?
  contactEmail         String?
  contactPhone         String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  Attendance           Attendance[]
  createdByAdmin       User         @relation(fields: [createdBy], references: [userId], onDelete: Cascade, map: "Event_createdByAdmin_fkey")

  @@index([eventDate])
  @@index([eventType])
  @@index([status])
  @@index([createdBy, status])
}

model RFIDTags {
  tagId            Int                    @id @default(autoincrement())
  tagNumber        String                 @unique
  tagType          TagType
  assignedAt       DateTime               @default(now())
  lastUsed         DateTime?
  expiresAt        DateTime?
  status           RFIDStatus             @default(ACTIVE)
  notes            String?
  studentId        Int?                   @unique
  instructorId     Int?                   @unique
  assignedBy       Int?
  assignmentReason String?
  assignmentLogs   RFIDTagAssignmentLog[]
  assignedByUser   User?                  @relation("TagAssignment", fields: [assignedBy], references: [userId])
  instructor       Instructor?            @relation(fields: [instructorId], references: [instructorId])
  student          Student?               @relation(fields: [studentId], references: [studentId])

  @@unique([studentId, instructorId], name: "unique_student_or_instructor")
  @@index([status])
  @@index([tagType])
  @@index([expiresAt])
}

model RFIDReader {
  readerId        Int              @id @default(autoincrement())
  roomId          Int              @unique
  deviceId        String           @unique
  deviceName      String?
  components      Json
  assemblyDate    DateTime         @default(now())
  lastCalibration DateTime?
  nextCalibration DateTime?
  ipAddress       String?
  status          ReaderStatus     @default(ACTIVE)
  lastSeen        DateTime         @default(now())
  notes           String?
  testResults     Json?
  RFIDLogs        RFIDLogs[]
  room            Room             @relation(fields: [roomId], references: [roomId])
  RFIDReaderLogs  RFIDReaderLogs[]

  @@index([status])
  @@index([lastSeen])
  @@index([deviceId, status])
}

model RFIDLogs {
  logsId       Int         @id @default(autoincrement())
  rfidTag      String
  readerId     Int
  scanType     ScanType
  scanStatus   ScanStatus  @default(SUCCESS)
  location     String
  timestamp    DateTime    @default(now())
  userId       Int
  userRole     Role
  deviceInfo   Json?
  ipAddress    String?
  attendanceId Int?
  rfidLog      Attendance?
  reader       RFIDReader  @relation(fields: [readerId], references: [readerId])
  user         User        @relation(fields: [userId], references: [userId])

  @@index([rfidTag, timestamp])
  @@index([userId, userRole])
  @@index([readerId, timestamp])
  @@index([attendanceId])
}

model RFIDReaderLogs {
  id         Int           @id @default(autoincrement())
  readerId   Int
  eventType  RFIDEventType
  severity   LogSeverity   @default(INFO)
  message    String?
  details    Json?
  ipAddress  String?
  timestamp  DateTime      @default(now())
  resolvedAt DateTime?
  resolution String?
  reader     RFIDReader    @relation(fields: [readerId], references: [readerId])

  @@index([readerId, eventType])
  @@index([timestamp])
  @@index([severity])
}

model ReportLog {
  reportId    Int          @id @default(autoincrement())
  generatedBy Int
  reportType  ReportType
  reportName  String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  status      ReportStatus @default(PENDING)
  filepath    String?
  fileSize    Int?
  fileFormat  String?
  parameters  Json?
  error       String?
  user        User         @relation(fields: [generatedBy], references: [userId], onDelete: Cascade)

  @@index([generatedBy, reportType])
  @@index([createdAt])
}

model SystemLogs {
  id         Int      @id @default(autoincrement())
  userId     Int
  actionType String
  module     String
  entityId   Int?
  details    String?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [userId])

  @@index([userId, actionType])
  @@index([module, entityId])
}

model Announcement {
  announcementId Int         @id @default(autoincrement())
  createdby      Int
  userType       Role
  title          String
  content        String
  isGeneral      Boolean     @default(false)
  subjectId      Int?
  sectionId      Int?
  instructorId   Int?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  status         Status      @default(ACTIVE)
  priority       Priority    @default(NORMAL)
  admin          User        @relation(fields: [createdby], references: [userId])
  instructor     Instructor? @relation("InstructorToAnnouncements", fields: [instructorId], references: [instructorId])
  section        Section?    @relation(fields: [sectionId], references: [sectionId])
  subject        Subjects?   @relation(fields: [subjectId], references: [subjectId], map: "Announcement_subjectId_fkey")

  @@index([createdby, userType])
}

model RFIDTagAssignmentLog {
  id              Int      @id @default(autoincrement())
  tagId           Int
  action          String
  assignedToType  String?
  assignedToId    Int?
  assignedToName  String?
  performedBy     Int?
  performedByName String?
  timestamp       DateTime @default(now())
  notes           String?
  RFIDTag         RFIDTags @relation(fields: [tagId], references: [tagId])
}

model AttendanceNotification {
  notificationId Int                @id @default(autoincrement())
  studentId      Int
  attendanceId   Int?
  type           NotificationType
  message        String
  recipient      RecipientType
  method         NotificationMethod
  status         NotificationStatus
  sentAt         DateTime?
  createdAt      DateTime           @default(now())
  attendance     Attendance?        @relation(fields: [attendanceId], references: [attendanceId])
  student        Student            @relation(fields: [studentId], references: [studentId])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [userId])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
  BLOCKED
}

enum RoomType {
  LECTURE
  LABORATORY
  CONFERENCE
  OFFICE
  OTHER
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
  INACTIVE
}

enum SemesterStatus {
  UPCOMING
  CURRENT
  COMPLETED
  CANCELLED
}

enum EnrollmentStatus {
  ACTIVE
  DROPPED
  COMPLETED
  FAILED
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  PENDING_REVIEW
}

enum DepartmentType {
  ACADEMIC
  ADMINISTRATIVE
}

enum SubjectType {
  LECTURE
  LABORATORY
  HYBRID
  THESIS
  RESEARCH
  INTERNSHIP
}

enum SubjectStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  PENDING_REVIEW
}

enum ScheduleType {
  REGULAR
  MAKEUP
  SPECIAL
  REVIEW
  EXAM
}

enum ScheduleStatus {
  ACTIVE
  CANCELLED
  POSTPONED
  COMPLETED
  CONFLICT
}

enum AttendanceType {
  RFID_SCAN
  MANUAL_ENTRY
  ONLINE
}

enum AttendanceVerification {
  PENDING
  VERIFIED
  DISPUTED
  REJECTED
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  GUARDIAN
}

enum StudentType {
  IRREGULAR
  REGULAR
}

enum InstructorType {
  FULL_TIME
  PART_TIME
}

enum GuardianType {
  PARENT
  GUARDIAN
}

enum UserGender {
  MALE
  FEMALE
}

enum yearLevel {
  FIRST_YEAR
  SECOND_YEAR
  THIRD_YEAR
  FOURTH_YEAR
}

enum SemesterType {
  FIRST_SEMESTER
  SECOND_SEMESTER
  THIRD_SEMESTER
}

enum SectionType {
  LECTURE
  LAB
}

enum SectionStatus {
  ACTIVE
  INACTIVE
}

enum CourseType {
  MANDATORY
  ELECTIVE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum InstructorAttendanceStatus {
  PRESENT
  ABSENT
  LATE
  ON_LEAVE
}

enum ReportType {
  ATTENDANCE_SUMMARY
  STUDENT_ATTENDANCE
  INSTRUCTOR_ATTENDANCE
  COURSE_ATTENDANCE
  DEPARTMENT_ATTENDANCE
  RFID_ACTIVITY
  SYSTEM_ACTIVITY
  USER_ACTIVITY
  CUSTOM
}

enum Status {
  ACTIVE
  INACTIVE
}

enum RFIDStatus {
  ACTIVE
  INACTIVE
  LOST
  DAMAGED
  EXPIRED
  REPLACED
  RESERVED
}

enum idtype {
  STUDENT
  INSTRUCTOR
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ReportStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
  EXPIRED
}

enum RFIDEventType {
  SCAN_SUCCESS
  SCAN_ERROR
  CONNECTION_LOST
  CONNECTION_RESTORED
  BATTERY_LOW
  BATTERY_CRITICAL
  SIGNAL_WEAK
  SIGNAL_LOST
  RESTART
  CONFIGURATION_CHANGE
  FIRMWARE_UPDATE
  MAINTENANCE_REQUIRED
  SYSTEM_ERROR
}

enum LogSeverity {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum ScanType {
  CHECK_IN
  CHECK_OUT
  VERIFICATION
  TEST_SCAN
  MAINTENANCE
}

enum ScanStatus {
  SUCCESS
  FAILED
  DUPLICATE
  INVALID_TAG
  EXPIRED_TAG
  UNAUTHORIZED
  SYSTEM_ERROR
}

enum ReaderStatus {
  ACTIVE
  INACTIVE
  TESTING
  CALIBRATION
  REPAIR
  OFFLINE
  ERROR
}

enum TagType {
  STUDENT_CARD
  INSTRUCTOR_CARD
  TEMPORARY_PASS
  VISITOR_PASS
  MAINTENANCE
  TEST
}

enum EventType {
  ACADEMIC
  SOCIAL
  SPORTS
  ORIENTATION
  GRADUATION
  MEETING
  WORKSHOP
  SEMINAR
  OTHER
}

enum EventStatus {
  DRAFT
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
  POSTPONED
}

enum NotificationType {
  ABSENCE
  TARDINESS
  IMPROVEMENT
  CONCERN
}

enum RecipientType {
  PARENT
  STUDENT
  BOTH
}

enum NotificationMethod {
  EMAIL
  SMS
  BOTH
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum RoomBuilding {
  BuildingA
  BuildingB
  BuildingC
  BuildingD
  BuildingE
}

enum RoomFloor {
  F1
  F2
  F3
  F4
  F5
  F6
}
