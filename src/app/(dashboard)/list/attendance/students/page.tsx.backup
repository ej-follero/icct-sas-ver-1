'use client';

import { useState, useEffect, useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Search, TrendingUp, TrendingDown, Users, Clock, AlertCircle, Filter, ChevronDown, BookOpen, Info, Printer, FileDown, FileText, ChevronUp, Mail, Phone, Send, Home, ChevronRight, Download, RefreshCw, Settings, Bell, HelpCircle, Maximize2, Minimize2, CheckCircle, X, ChevronsLeft, ChevronLeft, ChevronsRight, Calendar, Activity, BarChart3, Shield, Zap, AlertTriangle, Target, Building, GraduationCap, ArrowRight, Check, User, Hash } from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuTrigger,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator
} from "@/components/ui/dropdown-menu";
import {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandSeparator
} from "@/components/ui/command";
import { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider } from '@/components/ui/tooltip';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
// @ts-ignore
import { FixedSizeList as List, ListChildComponentProps } from 'react-window';
// @ts-ignore
import AutoSizer from 'react-virtualized-auto-sizer';
import { useDebounce } from '@/hooks/use-debounce';
import { Skeleton } from '@/components/ui/skeleton';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { LineChart, Line, XAxis, YAxis, Tooltip as RechartsTooltip, ResponsiveContainer, BarChart, Bar, CartesianGrid, Legend, PieChart, Pie, Cell } from 'recharts';
import { Checkbox } from '@/components/ui/checkbox';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import StudentDetailModal from '@/components/StudentDetailModal';
import AttendanceStatusIndicators from '@/components/AttendanceStatusIndicators';
import ParentNotificationSystem from '@/components/ParentNotificationSystem';
import { ICCT_CLASSES, getStatusColor, getAttendanceRateColor } from '@/lib/colors';
import { 
  StudentAttendance, 
  AttendanceStatus, 
  AttendanceType, 
  AttendanceVerification, 
  RiskLevel,
  EnrollmentStatus
} from '@/types/student-attendance';
import { UserGender, StudentType, YearLevel, UserStatus } from '@/types/enums';

interface Filters {
  department: string;
  course: string;
  yearLevel: string;
  attendanceRate: string;
  riskLevel: string;
  studentStatus: string;
  studentType: string;
  section: string;
}

interface DateRange {
  start: string;
  end: string;
}

// Enhanced Dashboard Data
const hourlyTrends = Array.from({ length: 24 }).map((_, i) => ({
  hour: i,
  present: Math.floor(Math.random() * 50) + 20,
  late: Math.floor(Math.random() * 10),
  absent: Math.floor(Math.random() * 15)
}));

const recentActivity = [
  { id: 1, student: 'Alice Johnson', action: 'checked in', time: '2 min ago', status: 'present', department: 'Computer Science' },
  { id: 2, student: 'Bob Smith', action: 'checked in late', time: '5 min ago', status: 'late', department: 'Information Technology' },
  { id: 3, student: 'Carol Davis', action: 'checked out early', time: '8 min ago', status: 'early_leave', department: 'Computer Science' },
  { id: 4, student: 'David Wilson', action: 'checked in', time: '12 min ago', status: 'present', department: 'Information Technology' },
  { id: 5, student: 'Eva Chen', action: 'checked in late', time: '15 min ago', status: 'late', department: 'Computer Science' }
];

const departmentBreakdown = [
  { name: 'Computer Science', present: 42, total: 50, rate: 84 },
  { name: 'Information Technology', present: 38, total: 45, rate: 84.4 },
  { name: 'Engineering', present: 35, total: 40, rate: 87.5 },
  { name: 'Business', present: 28, total: 35, rate: 80 }
];

// Updated mock data to match the new schema structure
const mockStudents: StudentAttendance[] = [
  {
    id: 'student-1',
    studentName: 'John Doe',
    studentId: 'STU-2024-001',
    studentIdNumber: 'STU-2024-001',
    firstName: 'John',
    lastName: 'Doe',
    middleName: '',
    email: 'john.doe@student.edu',
    phoneNumber: '+1234567890',
    department: 'Computer Science',
    course: 'BSCS',
    yearLevel: YearLevel.FIRST_YEAR,
    gender: UserGender.MALE,
    status: UserStatus.ACTIVE,
    studentType: StudentType.REGULAR,
    rfidTag: '1234567890',
    subjects: ['Web Development', 'Database Systems'],
    presentDays: 42,
    absentDays: 3,
    lateDays: 5,
    totalDays: 50,
    attendanceRate: 93.3,
    lastAttendance: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
    lastAttendanceStatus: AttendanceStatus.PRESENT,
    lastAttendanceType: AttendanceType.REGULAR,
    lastVerificationStatus: AttendanceVerification.VERIFIED,
    lastCheckInTime: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
    lastCheckOutTime: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000 + 3 * 60 * 60 * 1000).toISOString(),
    lastDuration: 180,
    lastLocation: 'Room 301',
    trend: 2.5,
    subjectAttendance: {
      'Web Development': {
        attendanceRate: 95.0,
        totalSessions: 25,
        presentCount: 23,
        lateCount: 2,
        absentCount: 0
      },
      'Database Systems': {
        attendanceRate: 91.0,
        totalSessions: 25,
        presentCount: 21,
        lateCount: 3,
        absentCount: 1
      }
    },

    riskLevel: RiskLevel.NONE,
    enrollmentStatus: EnrollmentStatus.ENROLLED,
    guardianInfo: {
      name: 'Robert Doe',
      email: 'robert.doe@email.com',
      phone: '+1234567891',
      relationship: 'Father'
    },
    academicInfo: {
      totalSubjects: 2,
      currentEnrollment: 2,
      sectionName: 'CS101'
    },
    attendanceStats: {
      presentPercentage: 84.0,
      latePercentage: 10.0,
      absentPercentage: 6.0,
      excusedPercentage: 0.0
    }
  },
  {
    id: 'student-2',
    studentName: 'Jane Smith',
    studentId: 'STU-2024-002',
    studentIdNumber: 'STU-2024-002',
    firstName: 'Jane',
    lastName: 'Smith',
    middleName: '',
    email: 'jane.smith@student.edu',
    phoneNumber: '+1234567892',
    department: 'Information Technology',
    course: 'BSIT',
    yearLevel: YearLevel.SECOND_YEAR,
    gender: UserGender.FEMALE,
    status: UserStatus.ACTIVE,
    studentType: StudentType.REGULAR,
    rfidTag: '1234567891',
    subjects: ['Network Security', 'Cybersecurity'],
    presentDays: 38,
    absentDays: 2,
    lateDays: 0,
    totalDays: 40,
    attendanceRate: 95.0,
    lastAttendance: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
    lastAttendanceStatus: AttendanceStatus.PRESENT,
    lastAttendanceType: AttendanceType.REGULAR,
    lastVerificationStatus: AttendanceVerification.VERIFIED,
    lastCheckInTime: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
    lastCheckOutTime: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000 + 3 * 60 * 60 * 1000).toISOString(),
    lastDuration: 180,
    lastLocation: 'Room 205',
    trend: 1.2,
    subjectAttendance: {
      'Network Security': {
        attendanceRate: 97.0,
        totalSessions: 20,
        presentCount: 19,
        lateCount: 1,
        absentCount: 0
      },
      'Cybersecurity': {
        attendanceRate: 93.0,
        totalSessions: 20,
        presentCount: 18,
        lateCount: 1,
        absentCount: 1
      }
    },

    riskLevel: RiskLevel.LOW,
    enrollmentStatus: EnrollmentStatus.ENROLLED,
    guardianInfo: {
      name: 'Mary Smith',
      email: 'mary.smith@email.com',
      phone: '+1234567893',
      relationship: 'Mother'
    },
    academicInfo: {
      totalSubjects: 2,
      currentEnrollment: 2,
      sectionName: 'IT201'
    },
    attendanceStats: {
      presentPercentage: 95.0,
      latePercentage: 0.0,
      absentPercentage: 5.0,
      excusedPercentage: 0.0
    }
  },
  {
    id: 'student-3',
    studentName: 'Mike Johnson',
    studentId: 'STU-2024-003',
    studentIdNumber: 'STU-2024-003',
    firstName: 'Mike',
    lastName: 'Johnson',
    middleName: '',
    email: 'mike.johnson@student.edu',
    phoneNumber: '+1234567894',
    department: 'Computer Science',
    course: 'BSCS',
    yearLevel: YearLevel.THIRD_YEAR,
    gender: UserGender.MALE,
    status: UserStatus.ACTIVE,
    studentType: StudentType.REGULAR,
    rfidTag: '1234567892',
    subjects: ['Software Engineering', 'Data Structures'],
    presentDays: 28,
    absentDays: 8,
    lateDays: 4,
    totalDays: 40,
    attendanceRate: 70.0,
    lastAttendance: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
    lastAttendanceStatus: AttendanceStatus.LATE,
    lastAttendanceType: AttendanceType.REGULAR,
    lastVerificationStatus: AttendanceVerification.PENDING,
    lastCheckInTime: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
    lastLocation: 'Room 402',
    trend: -3.2,
    subjectAttendance: {
      'Software Engineering': {
        attendanceRate: 68.0,
        totalSessions: 20,
        presentCount: 12,
        lateCount: 2,
        absentCount: 6
      },
      'Data Structures': {
        attendanceRate: 72.0,
        totalSessions: 20,
        presentCount: 13,
        lateCount: 2,
        absentCount: 5
      }
    },

    riskLevel: RiskLevel.HIGH,
    enrollmentStatus: EnrollmentStatus.ENROLLED,
    guardianInfo: {
      name: 'David Johnson',
      email: 'david.johnson@email.com',
      phone: '+1234567895',
      relationship: 'Father'
    },
    academicInfo: {
      totalSubjects: 2,
      currentEnrollment: 2,
      sectionName: 'CS201'
    },
    attendanceStats: {
      presentPercentage: 70.0,
      latePercentage: 10.0,
      absentPercentage: 20.0,
      excusedPercentage: 0.0
    }
  },
  {
    id: 'student-4',
    studentName: 'Sarah Wilson',
    studentId: 'STU-2024-004',
    studentIdNumber: 'STU-2024-004',
    firstName: 'Sarah',
    lastName: 'Wilson',
    middleName: '',
    email: 'sarah.wilson@student.edu',
    phoneNumber: '+1234567896',
    department: 'Information Technology',
    course: 'BSIT',
    yearLevel: YearLevel.FOURTH_YEAR,
    gender: UserGender.FEMALE,
    status: UserStatus.ACTIVE,
    studentType: StudentType.REGULAR,
    rfidTag: '1234567893',
    subjects: ['System Administration', 'Cloud Computing'],
    presentDays: 45,
    absentDays: 1,
    lateDays: 4,
    totalDays: 50,
    attendanceRate: 98.0,
    lastAttendance: new Date(Date.now() - 0 * 24 * 60 * 60 * 1000).toISOString(),
    lastAttendanceStatus: AttendanceStatus.PRESENT,
    lastAttendanceType: AttendanceType.REGULAR,
    lastVerificationStatus: AttendanceVerification.VERIFIED,
    lastCheckInTime: new Date(Date.now() - 0 * 24 * 60 * 60 * 1000).toISOString(),
    lastCheckOutTime: new Date(Date.now() - 0 * 24 * 60 * 60 * 1000 + 4 * 60 * 60 * 1000).toISOString(),
    lastDuration: 240,
    lastLocation: 'Room 105',
    trend: 1.8,
    subjectAttendance: {
      'System Administration': {
        attendanceRate: 98.0,
        totalSessions: 25,
        presentCount: 24,
        lateCount: 1,
        absentCount: 0
      },
      'Cloud Computing': {
        attendanceRate: 98.0,
        totalSessions: 25,
        presentCount: 24,
        lateCount: 1,
        absentCount: 0
      }
    },

    riskLevel: RiskLevel.NONE,
    enrollmentStatus: EnrollmentStatus.ENROLLED,
    guardianInfo: {
      name: 'Jennifer Wilson',
      email: 'jennifer.wilson@email.com',
      phone: '+1234567897',
      relationship: 'Mother'
    },
    academicInfo: {
      totalSubjects: 2,
      currentEnrollment: 2,
      sectionName: 'IT401'
    },
    attendanceStats: {
      presentPercentage: 90.0,
      latePercentage: 8.0,
      absentPercentage: 2.0,
      excusedPercentage: 0.0
    }
  },
  {
    id: 'student-5',
    studentName: 'Alex Rodriguez',
    studentId: 'STU-2024-005',
    studentIdNumber: 'STU-2024-005',
    firstName: 'Alex',
    lastName: 'Rodriguez',
    middleName: '',
    email: 'alex.rodriguez@student.edu',
    phoneNumber: '+1234567898',
    department: 'Computer Science',
    course: 'BSCS',
    yearLevel: YearLevel.SECOND_YEAR,
    gender: UserGender.MALE,
    status: UserStatus.ACTIVE,
    studentType: StudentType.REGULAR, // Changed from 'Scholarship' as it's not in the enum
    rfidTag: '1234567894',
    subjects: ['Algorithms', 'Computer Networks'],
    presentDays: 32,
    absentDays: 6,
    lateDays: 2,
    totalDays: 40,
    attendanceRate: 85.0,
    lastAttendance: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),
    lastAttendanceStatus: AttendanceStatus.PRESENT,
    lastAttendanceType: AttendanceType.REGULAR,
    lastVerificationStatus: AttendanceVerification.VERIFIED,
    lastCheckInTime: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),
    lastCheckOutTime: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000 + 3 * 60 * 60 * 1000).toISOString(),
    lastDuration: 180,
    lastLocation: 'Room 302',
    trend: -0.5,
    subjectAttendance: {
      'Algorithms': {
        attendanceRate: 87.0,
        totalSessions: 20,
        presentCount: 17,
        lateCount: 1,
        absentCount: 2
      },
      'Computer Networks': {
        attendanceRate: 83.0,
        totalSessions: 20,
        presentCount: 16,
        lateCount: 1,
        absentCount: 3
      }
    },

    riskLevel: RiskLevel.LOW,
    enrollmentStatus: EnrollmentStatus.ENROLLED,
    guardianInfo: {
      name: 'Carlos Rodriguez',
      email: 'carlos.rodriguez@email.com',
      phone: '+1234567899',
      relationship: 'Father'
    },
    academicInfo: {
      totalSubjects: 2,
      currentEnrollment: 2,
      sectionName: 'CS201'
    },
    attendanceStats: {
      presentPercentage: 80.0,
      latePercentage: 5.0,
      absentPercentage: 15.0,
      excusedPercentage: 0.0
    }
  },
  {
    id: 'student-6',
    studentName: 'Emma Chen',
    studentId: 'STU-2024-006',
    studentIdNumber: 'STU-2024-006',
    firstName: 'Emma',
    lastName: 'Chen',
    middleName: '',
    email: 'emma.chen@student.edu',
    phoneNumber: '+1234567900',
    department: 'Information Technology',
    course: 'BSIT',
    yearLevel: 'First Year',
    gender: 'Female',
    status: 'ACTIVE',
    studentType: 'Regular',
    rfidTag: '1234567895',
    subjects: ['Programming Fundamentals', 'Mathematics'],
    presentDays: 22,
    absentDays: 12,
    lateDays: 6,
    totalDays: 40,
    attendanceRate: 70.0,
    lastAttendance: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
    lastAttendanceStatus: AttendanceStatus.LATE,
    lastAttendanceType: AttendanceType.REGULAR,
    lastVerificationStatus: AttendanceVerification.VERIFIED,
    lastCheckInTime: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
    lastCheckOutTime: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000 + 2 * 60 * 60 * 1000).toISOString(),
    lastDuration: 120,
    lastLocation: 'Room 101',
    trend: -2.1,
    subjectAttendance: {
      'Programming Fundamentals': {
        attendanceRate: 72.0,
        totalSessions: 20,
        presentCount: 13,
        lateCount: 3,
        absentCount: 4
      },
      'Mathematics': {
        attendanceRate: 68.0,
        totalSessions: 20,
        presentCount: 12,
        lateCount: 3,
        absentCount: 5
      }
    },

    riskLevel: RiskLevel.MEDIUM,
    enrollmentStatus: EnrollmentStatus.ENROLLED,
    guardianInfo: {
      name: 'Lisa Chen',
      email: 'lisa.chen@email.com',
      phone: '+1234567901',
      relationship: 'Mother'
    },
    academicInfo: {
      totalSubjects: 2,
      currentEnrollment: 2,
      sectionName: 'IT101'
    },
    attendanceStats: {
      presentPercentage: 55.0,
      latePercentage: 15.0,
      absentPercentage: 30.0,
      excusedPercentage: 0.0
    }
  }
];

const attendanceTrendsData = Array.from({ length: 14 }).map((_, i) => ({
  date: `${i + 1 < 10 ? '0' : ''}${i + 1} Jun`,
  rate: 85 + Math.round(Math.sin(i / 2) * 10 + Math.random() * 5),
}));

const topPerformers = [
  { name: 'John Doe', rate: 99 },
  { name: 'Jane Smith', rate: 98 },
  { name: 'Alice Lee', rate: 97 },
  { name: 'Bob Cruz', rate: 97 },
  { name: 'Maria Tan', rate: 96 },
];
const bottomPerformers = [
  { name: 'Carl Lim', rate: 70 },
  { name: 'Daisy Yu', rate: 72 },
  { name: 'Evan Ong', rate: 73 },
  { name: 'Faye Sy', rate: 74 },
  { name: 'Gina Chua', rate: 75 },
];

function AttendanceTrendsChart() {
  return (
    <Card className="mb-8 border border-blue-100 shadow bg-white">
      <CardHeader>
        <CardTitle className="text-blue-800">Attendance Trends (Last 14 Days)</CardTitle>
      </CardHeader>
      <CardContent className="p-6">
        <ResponsiveContainer width="100%" height={180}>
          <LineChart data={attendanceTrendsData} margin={{ top: 10, right: 20, left: 0, bottom: 0 }}>
            <XAxis dataKey="date" fontSize={10} tickLine={false} axisLine={false} />
            <YAxis fontSize={10} tickLine={false} axisLine={false} domain={[60, 100]} />
            <RechartsTooltip />
            <Line type="monotone" dataKey="rate" stroke="#2563eb" strokeWidth={2} dot={false} />
          </LineChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}

// Attendance by Year Level (mock data)
const yearLevelAttendance = [
  { year: 'First Year', rate: 92 },
  { year: 'Second Year', rate: 88 },
  { year: 'Third Year', rate: 85 },
  { year: 'Fourth Year', rate: 90 },
];

function AttendanceByYearLevelChart() {
  return (
    <Card className="mb-8 border border-blue-100 shadow bg-white">
      <CardHeader>
        <CardTitle className="text-blue-800">Attendance by Year Level</CardTitle>
      </CardHeader>
      <CardContent className="p-6">
        <ResponsiveContainer width="100%" height={180}>
          <BarChart data={yearLevelAttendance} margin={{ left: 20, right: 20 }}>
            <XAxis dataKey="year" fontSize={12} tickLine={false} axisLine={false} />
            <YAxis fontSize={10} tickLine={false} axisLine={false} domain={[80, 100]} />
            <RechartsTooltip />
            <Bar dataKey="rate" fill="#2563eb" radius={[4, 4, 0, 0]} />
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}

// Absence Heatmap (mock data, simple grid)
const absenceHeatmapData = [
  // 7 days x 4 weeks
  [2, 1, 0, 3, 2, 1, 0],
  [1, 0, 2, 1, 0, 2, 1],
  [0, 1, 1, 0, 2, 1, 0],
  [2, 2, 0, 1, 1, 0, 1],
];
const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];

function AbsenceHeatmap() {
  return (
    <Card className="mb-8 border border-blue-100 shadow bg-white">
      <CardHeader>
        <CardTitle className="text-blue-800">Absence Heatmap (Last 4 Weeks)</CardTitle>
      </CardHeader>
      <CardContent className="p-6">
        <div className="flex flex-col gap-2">
          <div className="flex gap-2 text-xs text-gray-500 mb-1">
            {days.map(day => (
              <div key={day} className="w-8 text-center">{day}</div>
            ))}
          </div>
          {absenceHeatmapData.map((week, i) => (
            <div key={i} className="flex gap-2">
              {week.map((val, j) => (
                <div
                  key={j}
                  className={`w-8 h-8 rounded ${val === 0 ? 'bg-blue-50' : val === 1 ? 'bg-blue-200' : val === 2 ? 'bg-blue-400' : 'bg-blue-700'} flex items-center justify-center text-xs font-bold text-white`}
                  title={`Week ${i + 1}, ${days[j]}: ${val} absences`}
                >
                  {val > 0 ? val : ''}
                </div>
              ))}
            </div>
          ))}
        </div>
        <div className="flex gap-2 mt-2 text-xs text-gray-500">
          <span className="w-8 h-4 bg-blue-50 rounded inline-block"></span> 0
          <span className="w-8 h-4 bg-blue-200 rounded inline-block ml-2"></span> 1
          <span className="w-8 h-4 bg-blue-400 rounded inline-block ml-2"></span> 2
          <span className="w-8 h-4 bg-blue-700 rounded inline-block ml-2"></span> 3+
        </div>
      </CardContent>
    </Card>
  );
}

// Attendance by Day of Week (mock data)
const dayOfWeekAttendance = [
  { day: 'Mon', rate: 91 },
  { day: 'Tue', rate: 93 },
  { day: 'Wed', rate: 89 },
  { day: 'Thu', rate: 92 },
  { day: 'Fri', rate: 87 },
  { day: 'Sat', rate: 80 },
  { day: 'Sun', rate: 75 },
];

function AttendanceByDayOfWeekChart() {
  return (
    <Card className="mb-8 border border-blue-100 shadow bg-white">
      <CardHeader>
        <CardTitle className="text-blue-800">Attendance by Day of Week</CardTitle>
      </CardHeader>
      <CardContent className="p-6">
        <ResponsiveContainer width="100%" height={180}>
          <BarChart data={dayOfWeekAttendance} margin={{ left: 20, right: 20 }}>
            <XAxis dataKey="day" fontSize={12} tickLine={false} axisLine={false} />
            <YAxis fontSize={10} tickLine={false} axisLine={false} domain={[70, 100]} />
            <RechartsTooltip />
            <Bar dataKey="rate" fill="#2563eb" radius={[4, 4, 0, 0]} />
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}

// Monthly Attendance Comparison (mock data)
const monthlyAttendance = [
  { month: 'Jan', rate: 88 },
  { month: 'Feb', rate: 90 },
  { month: 'Mar', rate: 92 },
  { month: 'Apr', rate: 91 },
  { month: 'May', rate: 89 },
  { month: 'Jun', rate: 93 },
];

function MonthlyAttendanceComparisonChart() {
  return (
    <Card className="mb-8 border border-blue-100 shadow bg-white">
      <CardHeader>
        <CardTitle className="text-blue-800">Monthly Attendance Comparison</CardTitle>
      </CardHeader>
      <CardContent className="p-6">
        <ResponsiveContainer width="100%" height={180}>
          <LineChart data={monthlyAttendance} margin={{ top: 10, right: 20, left: 0, bottom: 0 }}>
            <XAxis dataKey="month" fontSize={12} tickLine={false} axisLine={false} />
            <YAxis fontSize={10} tickLine={false} axisLine={false} domain={[80, 100]} />
            <RechartsTooltip />
            <Line type="monotone" dataKey="rate" stroke="#2563eb" strokeWidth={2} dot />
          </LineChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
}

// Components
const SearchBar = ({
  searchQuery,
  setSearchQuery,
  departments,
  courses,
  yearLevels,
  riskLevels,
  studentStatuses,
  studentTypes,
  sections,
  filters,
  setFilters,
  dateRange,
  setDateRange,
  handleClearFilters,
  expanded,
  setExpanded,
  activeFilterTab,
  setActiveFilterTab,
  recentSearches,
  setRecentSearches,
  handleSearchChange,
  currentTime,
  mounted
}: {
  searchQuery: string;
  setSearchQuery: (query: string) => void;
  departments: string[];
  courses: string[];
  yearLevels: string[];
  riskLevels: string[];
  studentStatuses: string[];
  studentTypes: string[];
  sections: string[];
  filters: Filters;
  setFilters: (filters: Filters) => void;
  dateRange: DateRange;
  setDateRange: (range: DateRange) => void;
  handleClearFilters: () => void;
  expanded: boolean;
  setExpanded: (expanded: boolean) => void;
  activeFilterTab: string;
  setActiveFilterTab: (tab: string) => void;
  recentSearches: string[];
  setRecentSearches: (searches: string[]) => void;
  handleSearchChange: (query: string) => void;
  currentTime: string;
  mounted: boolean;
}) => {
  const hasDateRange = dateRange.start && dateRange.end;
  const activeFilterCount = [filters.department, filters.course, filters.yearLevel, filters.attendanceRate, filters.riskLevel, filters.studentStatus, filters.studentType, filters.section, searchQuery, hasDateRange].filter(Boolean).length;
  
  return (
    <div>
      {/* Blue Gradient Header with Integrated Section Title */}
      <div className="bg-gradient-to-r from-[#1e40af] to-[#3b82f6] px-6 py-4">
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 bg-white/20 rounded-lg flex items-center justify-center">
              <Search className="w-5 h-5 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-bold text-white">Student Attendance</h3>
              <p className="text-blue-100 text-sm">Search, filter and manage attendance records</p>
            </div>
          </div>
          
          {/* Status & Quick Reset Options */}
          <div className="flex items-center gap-3">
            <div className="text-sm text-blue-100 bg-white/10 px-3 py-2 rounded-lg border border-white/20 flex items-center gap-2">
              <Clock className="w-4 h-4" />
              <span>Last updated: {mounted ? currentTime : ''}</span>
            </div>
            {activeFilterCount > 0 && (
              <div className="flex items-center gap-2 bg-white/20 border border-white/30 rounded-lg px-3 py-2">
                <div className="w-2 h-2 bg-white rounded-full animate-pulse"></div>
                <span className="text-sm font-medium text-white">{activeFilterCount} active filter{activeFilterCount !== 1 ? 's' : ''}</span>
              </div>
            )}
            
            <Button
              onClick={handleClearFilters}
              variant="ghost"
              size="sm"
              className="flex items-center gap-2 text-blue-100 hover:bg-white/20 hover:text-white border-white/20 transition-all"
              disabled={activeFilterCount === 0}
            >
              <RefreshCw className="h-4 w-4" />
              Reset All
            </Button>
            
            {/* Minimize Search & Filter Button */}
            <button
              onClick={() => setExpanded(!expanded)}
              className="bg-white/20 hover:bg-white/30 text-white p-2 rounded-lg transition-all hover:scale-105"
              title={expanded ? "Minimize search & filter" : "Expand search & filter"}
            >
              {expanded ? <Minimize2 className="w-4 h-4" /> : <Maximize2 className="w-4 h-4" />}
            </button>
          </div>
        </div>
      </div>

      {/* Content Section */}
      {expanded && (
      <div className="p-6">
        {/* Simplified Search and Filter Interface */}
        <div className="space-y-6">
          {/* Search Input with Integrated Filter Button */}
          <div className="space-y-3">
            <div className="flex gap-2">
              <div className="relative group flex-1">
                <Search className="absolute left-3.5 top-1/2 transform -translate-y-1/2 text-blue-400 h-4 w-4 transition-colors group-focus-within:text-blue-600 z-10" />
                <input
                  type="text"
                  placeholder="Search by student name, ID, email, department, or course..."
                  value={searchQuery}
                  onChange={(e) => handleSearchChange(e.target.value)}
                  className="w-full pl-11 pr-12 py-3 border-2 border-blue-200 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-blue-900 placeholder-blue-400 font-medium shadow-sm text-sm"
                />
                {searchQuery && (
                  <button
                    onClick={() => setSearchQuery('')}
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 text-blue-400 hover:text-blue-600 bg-blue-100 hover:bg-blue-200 rounded-lg w-8 h-8 flex items-center justify-center transition-all"
                  >
                    <X className="w-4 h-4" />
                  </button>
                )}
                
                {/* Recent searches dropdown */}
                {recentSearches.length > 0 && !searchQuery && (
                  <div className="absolute top-full left-0 right-0 mt-1 bg-white rounded-lg shadow-lg border border-blue-100 overflow-hidden z-20">
                    <div className="p-3 border-b border-blue-100">
                      <div className="flex items-center justify-between">
                        <h3 className="text-sm font-medium text-blue-900">Recent searches</h3>
                        <button
                          onClick={() => setRecentSearches([])}
                          className="text-xs text-blue-600 hover:text-blue-800 font-medium hover:underline"
                        >
                          Clear all
                        </button>
                      </div>
                    </div>
                    <div className="max-h-60 overflow-y-auto">
                      {recentSearches.map((search, index) => (
                        <div 
                          key={index}
                          className="flex items-center gap-3 px-4 py-2.5 hover:bg-blue-50 cursor-pointer transition-colors"
                          onClick={() => setSearchQuery(search)}
                        >
                          <Clock className="h-4 w-4 text-blue-500 flex-shrink-0" />
                          <span className="text-sm text-blue-800 truncate">{search}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
              
              {/* Filter Button */}
              <button
                onClick={() => setActiveFilterTab(activeFilterTab === 'filters' ? '' : 'filters')}
                className={`flex items-center gap-2 px-4 py-3 text-sm font-medium transition-all border-2 rounded-lg ${
                  activeFilterTab === 'filters' || Object.values(filters).some(Boolean) || (dateRange.start && dateRange.end)
                    ? 'bg-blue-100 text-blue-700 border-blue-300'
                    : 'bg-white text-gray-600 border-blue-200 hover:border-blue-300'
                }`}
              >
                <Filter className="w-4 h-4" />
                {Object.values(filters).some(Boolean) || (dateRange.start && dateRange.end) ? 
                  <span>Filters ({activeFilterCount})</span> : 
                  <span>Filter</span>
                }
              </button>
              
              {/* Clear All Button - Only shown when filters are active */}
              {activeFilterCount > 0 && (
                <button
                  onClick={handleClearFilters}
                  className="flex items-center gap-2 px-4 py-3 text-sm font-medium transition-all border-2 rounded-lg bg-red-50 text-red-600 border-red-200 hover:bg-red-100"
                >
                  <X className="w-4 h-4" />
                  Clear All
                </button>
              )}
            </div>
            
            {/* Search Results Indicator */}
            {searchQuery && (
              <div className="flex items-center">
                <div className="flex items-center gap-1.5 text-xs text-blue-700 bg-blue-100 px-3 py-1.5 rounded-lg border border-blue-200">
                  <div className="w-1.5 h-1.5 bg-blue-500 rounded-full animate-pulse"></div>
                  <span>Searching: <span className="font-semibold text-blue-900">"{searchQuery}"</span></span>
                </div>
              </div>
            )}
          </div>

                    {/* Unified Filters Panel */}
                    {activeFilterTab === 'filters' && (
            <div className="mt-4 p-4 border border-blue-200 rounded-lg bg-blue-50/50 shadow-sm">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-2">
                  <Filter className="w-5 h-5 text-blue-600" />
                  <h3 className="font-medium text-blue-900">Filter Options</h3>
                </div>
                <button
                  onClick={() => setActiveFilterTab('')}
                  className="text-blue-500 hover:text-blue-700"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
              
              {/* Date Range Selector */}
              <div className="mb-4 p-3 bg-white rounded-lg border border-blue-200 shadow-sm">
                <div className="flex items-center gap-2 mb-2">
                  <Calendar className="w-4 h-4 text-blue-600" />
                  <span className="text-sm font-medium text-blue-800">Date Range</span>
                  {hasDateRange && (
                    <button
                      onClick={() => setDateRange({ start: '', end: '' })}
                      className="ml-auto text-blue-500 hover:text-blue-700 bg-blue-50 hover:bg-blue-100 rounded-full w-5 h-5 flex items-center justify-center transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  )}
                </div>
                <div className="flex flex-wrap gap-3">
                  <div className="flex-1">
                    <label className="text-xs text-blue-700 mb-1 block">Start Date</label>
                    <input 
                      type="date" 
                      value={dateRange.start}
                      onChange={(e) => setDateRange({...dateRange, start: e.target.value})}
                      className="w-full border border-blue-200 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500/30 focus:border-blue-500"
                    />
                  </div>
                  <div className="flex-1">
                    <label className="text-xs text-blue-700 mb-1 block">End Date</label>
                    <input 
                      type="date" 
                      value={dateRange.end}
                      onChange={(e) => setDateRange({...dateRange, end: e.target.value})}
                      className="w-full border border-blue-200 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500/30 focus:border-blue-500"
                    />
                  </div>
                </div>
              </div>
              
              {/* Filter Categories */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 mb-4">
                <div className="bg-white rounded-lg border border-blue-200 p-3">
                  <h4 className="text-sm font-semibold text-blue-800 mb-3 flex items-center gap-2">
                    <AlertTriangle className="w-3.5 h-3.5 text-amber-500" />
                    Risk & Performance
                  </h4>
                  <div className="space-y-3">
                    {/* Risk Level Filter */}
                    <div className="space-y-1.5">
                      <div className="flex items-center justify-between">
                        <label className="text-xs text-blue-700">Risk Level</label>
                        {filters.riskLevel && (
                          <button
                            onClick={() => setFilters({ ...filters, riskLevel: '' })}
                            className="text-xs text-blue-500 hover:text-blue-700"
                          >
                            Clear
                          </button>
                        )}
                      </div>
                      <select
                        value={filters.riskLevel}
                        onChange={(e) => setFilters({ ...filters, riskLevel: e.target.value })}
                        className="w-full px-2.5 py-1.5 border border-blue-200 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm"
                      >
                        <option value="">All Risk Levels</option>
                        {riskLevels.map(risk => (
                          <option key={risk} value={risk}>{risk}</option>
                        ))}
                      </select>
                    </div>
                    
                    {/* Attendance Rate Filter */}
                    <div className="space-y-1.5">
                      <div className="flex items-center justify-between">
                        <label className="text-xs text-blue-700">Attendance Rate</label>
                        {filters.attendanceRate && (
                          <button
                            onClick={() => setFilters({ ...filters, attendanceRate: '' })}
                            className="text-xs text-blue-500 hover:text-blue-700"
                          >
                            Clear
                          </button>
                        )}
                      </div>
                      <select
                        value={filters.attendanceRate}
                        onChange={(e) => setFilters({ ...filters, attendanceRate: e.target.value })}
                        className="w-full px-2.5 py-1.5 border border-blue-200 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm"
                      >
                        <option value="">All Rates</option>
                        <option value="high">High (≥90%)</option>
                        <option value="medium">Medium (75-89%)</option>
                        <option value="low">Low (&lt;75%)</option>
                      </select>
                    </div>
                  </div>
                </div>
                
                <div className="bg-white rounded-lg border border-blue-200 p-3">
                  <h4 className="text-sm font-semibold text-blue-800 mb-3 flex items-center gap-2">
                    <Building className="w-3.5 h-3.5 text-blue-600" />
                    Academic Information
                  </h4>
                  <div className="space-y-3">
                    {/* Department Filter */}
                    <div className="space-y-1.5">
                      <div className="flex items-center justify-between">
                        <label className="text-xs text-blue-700">Department</label>
                        {filters.department && (
                          <button
                            onClick={() => setFilters({ ...filters, department: '' })}
                            className="text-xs text-blue-500 hover:text-blue-700"
                          >
                            Clear
                          </button>
                        )}
                      </div>
                      <select
                        value={filters.department}
                        onChange={(e) => setFilters({ ...filters, department: e.target.value })}
                        className="w-full px-2.5 py-1.5 border border-blue-200 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm"
                      >
                        <option value="">All Departments</option>
                        {departments.map(dept => (
                          <option key={dept} value={dept}>{dept}</option>
                        ))}
                      </select>
                    </div>
                    
                    {/* Course Filter */}
                    <div className="space-y-1.5">
                      <div className="flex items-center justify-between">
                        <label className="text-xs text-blue-700">Course</label>
                        {filters.course && (
                          <button
                            onClick={() => setFilters({ ...filters, course: '' })}
                            className="text-xs text-blue-500 hover:text-blue-700"
                          >
                            Clear
                          </button>
                        )}
                      </div>
                      <select
                        value={filters.course}
                        onChange={(e) => setFilters({ ...filters, course: e.target.value })}
                        className="w-full px-2.5 py-1.5 border border-blue-200 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm"
                      >
                        <option value="">All Courses</option>
                        {courses.map(course => (
                          <option key={course} value={course}>{course}</option>
                        ))}
                      </select>
                    </div>
                  </div>
                </div>
                
                <div className="bg-white rounded-lg border border-blue-200 p-3">
                  <h4 className="text-sm font-semibold text-blue-800 mb-3 flex items-center gap-2">
                    <Users className="w-3.5 h-3.5 text-green-600" />
                    Student Details
                  </h4>
                  <div className="space-y-3">
                    {/* Year Level Filter */}
                    <div className="space-y-1.5">
                      <div className="flex items-center justify-between">
                        <label className="text-xs text-blue-700">Year Level</label>
                        {filters.yearLevel && (
                          <button
                            onClick={() => setFilters({ ...filters, yearLevel: '' })}
                            className="text-xs text-blue-500 hover:text-blue-700"
                          >
                            Clear
                          </button>
                        )}
                      </div>
                      <select
                        value={filters.yearLevel}
                        onChange={(e) => setFilters({ ...filters, yearLevel: e.target.value })}
                        className="w-full px-2.5 py-1.5 border border-blue-200 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm"
                      >
                        <option value="">All Year Levels</option>
                        {yearLevels.map(level => (
                          <option key={level} value={level}>{level}</option>
                        ))}
                      </select>
                    </div>
                    
                    {/* Section Filter */}
                    <div className="space-y-1.5">
                      <div className="flex items-center justify-between">
                        <label className="text-xs text-blue-700">Section</label>
                        {filters.section && (
                          <button
                            onClick={() => setFilters({ ...filters, section: '' })}
                            className="text-xs text-blue-500 hover:text-blue-700"
                          >
                            Clear
                          </button>
                        )}
                      </div>
                      <select
                        value={filters.section}
                        onChange={(e) => setFilters({ ...filters, section: e.target.value })}
                        className="w-full px-2.5 py-1.5 border border-blue-200 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm"
                      >
                        <option value="">All Sections</option>
                        {sections.map(section => (
                          <option key={section} value={section}>{section}</option>
                        ))}
                      </select>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Additional Filters (Collapsible) */}
              <div className="bg-white rounded-lg border border-blue-200 p-3">
                <details className="group">
                  <summary className="flex items-center justify-between cursor-pointer list-none">
                    <h4 className="text-sm font-semibold text-blue-800 flex items-center gap-2">
                      <Settings className="w-3.5 h-3.5 text-gray-500" />
                      Additional Filters
                    </h4>
                    <div className="text-blue-500 transition-transform group-open:rotate-180">
                      <ChevronDown className="h-4 w-4" />
                    </div>
                  </summary>
                  <div className="pt-3 grid grid-cols-1 md:grid-cols-2 gap-4 mt-2">
                    {/* Student Status Filter */}
                    <div className="space-y-1.5">
                      <div className="flex items-center justify-between">
                        <label className="text-xs text-blue-700">Student Status</label>
                        {filters.studentStatus && (
                          <button
                            onClick={() => setFilters({ ...filters, studentStatus: '' })}
                            className="text-xs text-blue-500 hover:text-blue-700"
                          >
                            Clear
                          </button>
                        )}
                      </div>
                      <select
                        value={filters.studentStatus}
                        onChange={(e) => setFilters({ ...filters, studentStatus: e.target.value })}
                        className="w-full px-2.5 py-1.5 border border-blue-200 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm"
                      >
                        <option value="">All Statuses</option>
                        {studentStatuses.map(status => (
                          <option key={status} value={status}>{status}</option>
                        ))}
                      </select>
                    </div>
                    
                    {/* Student Type Filter */}
                    <div className="space-y-1.5">
                      <div className="flex items-center justify-between">
                        <label className="text-xs text-blue-700">Student Type</label>
                        {filters.studentType && (
                          <button
                            onClick={() => setFilters({ ...filters, studentType: '' })}
                            className="text-xs text-blue-500 hover:text-blue-700"
                          >
                            Clear
                          </button>
                        )}
                      </div>
                      <select
                        value={filters.studentType}
                        onChange={(e) => setFilters({ ...filters, studentType: e.target.value })}
                        className="w-full px-2.5 py-1.5 border border-blue-200 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm"
                      >
                        <option value="">All Types</option>
                        {studentTypes.map(type => (
                          <option key={type} value={type}>{type}</option>
                        ))}
                      </select>
                    </div>
                  </div>
                </details>
              </div>
              
              {/* Action Buttons */}
              <div className="flex justify-end mt-4 gap-2">
                <Button
                  onClick={handleClearFilters}
                  variant="outline"
                  size="sm"
                  className="border-red-200 text-red-600 hover:bg-red-50 hover:text-red-700"
                >
                  <X className="w-3.5 h-3.5 mr-1.5" />
                  Clear All Filters
                </Button>
                <Button
                  onClick={() => setActiveFilterTab('')}
                  size="sm"
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  <Filter className="w-3.5 h-3.5 mr-1.5" />
                  Apply Filters
                </Button>
              </div>
            </div>
          )}

          {/* Compact Active Filters Summary */}
          {activeFilterCount > 0 && (
            <div className="bg-gradient-to-r from-blue-50 to-blue-100 border border-blue-200 rounded-lg p-4 shadow-sm mt-4">
              <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-3 mb-3">
                <div className="flex items-center gap-2">
                  <div className="w-6 h-6 bg-gradient-to-br from-blue-500 to-blue-600 rounded-md flex items-center justify-center shadow-sm">
                    <Check className="w-3.5 h-3.5 text-white" />
                  </div>
                  <div>
                    <label className="text-base font-bold text-blue-900">Active Filters</label>
                    <p className="text-xs text-blue-700">{activeFilterCount} filter{activeFilterCount !== 1 ? 's' : ''} applied</p>
                  </div>
                </div>
                
                <div className="flex items-center gap-2">
                  <div className="text-xs text-blue-700 bg-blue-100 px-2 py-1 rounded-md border border-blue-300">
                    Filtered results
                  </div>
                  <Button
                    onClick={handleClearFilters}
                    variant="outline"
                    size="sm"
                    className="flex items-center gap-1.5 border-red-300 text-red-700 hover:bg-red-50 hover:border-red-400 transition-all text-xs px-3 py-1.5"
                  >
                    <X className="h-3.5 w-3.5" />
                    Clear All
                  </Button>
                </div>
              </div>
              
              <div className="flex flex-wrap gap-2">
                {searchQuery && (
                  <div className="bg-blue-200 text-blue-800 px-3 py-1.5 rounded-lg text-xs font-medium flex items-center gap-2 border border-blue-200 shadow-sm hover:shadow-md transition-all">
                    <Search className="w-3.5 h-3.5" />
                    <span className="font-semibold">Search:</span>
                    <span className="bg-blue-50 px-1.5 py-0.5 rounded">"{searchQuery}"</span>
                    <button
                      onClick={() => setSearchQuery('')}
                      className="ml-1 text-blue-500 hover:text-blue-700 hover:bg-blue-200 rounded-full w-4 h-4 flex items-center justify-center text-xs transition-all"
                    >
                      <X className="w-2.5 h-2.5" />
                    </button>
                  </div>
                )}
                
                {filters.department && (
                  <div className="bg-blue-200 text-blue-800 px-3 py-1.5 rounded-lg text-xs font-medium flex items-center gap-2 border border-blue-200 shadow-sm hover:shadow-md transition-all">
                    <span className="font-semibold">Department:</span>
                    <span className="bg-blue-50 px-1.5 py-0.5 rounded">{filters.department}</span>
                    <button
                      onClick={() => setFilters({ ...filters, department: '' })}
                      className="ml-1 text-blue-500 hover:text-blue-700 hover:bg-blue-200 rounded-full w-4 h-4 flex items-center justify-center text-xs transition-all"
                    >
                      <X className="w-2.5 h-2.5" />
                    </button>
                  </div>
                )}
                
                {filters.course && (
                  <div className="bg-blue-200 text-blue-800 px-3 py-1.5 rounded-lg text-xs font-medium flex items-center gap-2 border border-blue-200 shadow-sm hover:shadow-md transition-all">
                    <span className="font-semibold">Course:</span>
                    <span className="bg-blue-50 px-1.5 py-0.5 rounded">{filters.course}</span>
                    <button
                      onClick={() => setFilters({ ...filters, course: '' })}
                      className="ml-1 text-blue-500 hover:text-blue-700 hover:bg-blue-200 rounded-full w-4 h-4 flex items-center justify-center text-xs transition-all"
                    >
                      <X className="w-2.5 h-2.5" />
                    </button>
                  </div>
                )}
                
                {filters.yearLevel && (
                  <div className="bg-blue-200 text-blue-800 px-3 py-1.5 rounded-lg text-xs font-medium flex items-center gap-2 border border-blue-200 shadow-sm hover:shadow-md transition-all">
                    <span className="font-semibold">Year:</span>
                    <span className="bg-blue-50 px-1.5 py-0.5 rounded">{filters.yearLevel}</span>
                    <button
                      onClick={() => setFilters({ ...filters, yearLevel: '' })}
                      className="ml-1 text-blue-500 hover:text-blue-700 hover:bg-blue-200 rounded-full w-4 h-4 flex items-center justify-center text-xs transition-all"
                    >
                      <X className="w-2.5 h-2.5" />
                    </button>
                  </div>
                )}
                
                {filters.attendanceRate && (
                  <div className="bg-blue-200 text-blue-800 px-3 py-1.5 rounded-lg text-xs font-medium flex items-center gap-2 border border-blue-200 shadow-sm hover:shadow-md transition-all">
                    <span className="font-semibold">Rate:</span>
                    <span className="bg-blue-50 px-1.5 py-0.5 rounded">
                      {filters.attendanceRate === 'high' ? 'High (≥90%)' : filters.attendanceRate === 'medium' ? 'Medium (75-89%)' : 'Low (<75%)'}
                    </span>
                    <button
                      onClick={() => setFilters({ ...filters, attendanceRate: '' })}
                      className="ml-1 text-blue-500 hover:text-blue-700 hover:bg-blue-200 rounded-full w-4 h-4 flex items-center justify-center text-xs transition-all"
                    >
                      <X className="w-2.5 h-2.5" />
                    </button>
                  </div>
                )}
                
                {hasDateRange && (
                  <div className="bg-blue-200 text-blue-800 px-3 py-1.5 rounded-lg text-xs font-medium flex items-center gap-2 border border-blue-200 shadow-sm hover:shadow-md transition-all">
                    <span className="font-semibold">Date Range:</span>
                    <span className="bg-blue-50 px-1.5 py-0.5 rounded">
                      {new Date(dateRange.start).toLocaleDateString()} - {new Date(dateRange.end).toLocaleDateString()}
                    </span>
                    <button
                      onClick={() => setDateRange({ start: '', end: '' })}
                      className="ml-1 text-blue-500 hover:text-blue-700 hover:bg-blue-200 rounded-full w-4 h-4 flex items-center justify-center text-xs transition-all"
                    >
                      <X className="w-2.5 h-2.5" />
                    </button>
                  </div>
                )}
                
                {filters.riskLevel && (
                  <div className="bg-blue-200 text-blue-800 px-3 py-1.5 rounded-lg text-xs font-medium flex items-center gap-2 border border-blue-200 shadow-sm hover:shadow-md transition-all">
                    <span className="font-semibold">Risk Level:</span>
                    <span className="bg-blue-50 px-1.5 py-0.5 rounded">{filters.riskLevel}</span>
                    <button
                      onClick={() => setFilters({ ...filters, riskLevel: '' })}
                      className="ml-1 text-blue-500 hover:text-blue-700 hover:bg-blue-200 rounded-full w-4 h-4 flex items-center justify-center text-xs transition-all"
                    >
                      <X className="w-2.5 h-2.5" />
                    </button>
                  </div>
                )}
                
                {filters.studentStatus && (
                  <div className="bg-blue-200 text-blue-800 px-3 py-1.5 rounded-lg text-xs font-medium flex items-center gap-2 border border-blue-200 shadow-sm hover:shadow-md transition-all">
                    <span className="font-semibold">Status:</span>
                    <span className="bg-blue-50 px-1.5 py-0.5 rounded">{filters.studentStatus}</span>
                    <button
                      onClick={() => setFilters({ ...filters, studentStatus: '' })}
                      className="ml-1 text-blue-500 hover:text-blue-700 hover:bg-blue-200 rounded-full w-4 h-4 flex items-center justify-center text-xs transition-all"
                    >
                      <X className="w-2.5 h-2.5" />
                    </button>
                  </div>
                )}
                
                {filters.studentType && (
                  <div className="bg-blue-200 text-blue-800 px-3 py-1.5 rounded-lg text-xs font-medium flex items-center gap-2 border border-blue-200 shadow-sm hover:shadow-md transition-all">
                    <span className="font-semibold">Type:</span>
                    <span className="bg-blue-50 px-1.5 py-0.5 rounded">{filters.studentType}</span>
                    <button
                      onClick={() => setFilters({ ...filters, studentType: '' })}
                      className="ml-1 text-blue-500 hover:text-blue-700 hover:bg-blue-200 rounded-full w-4 h-4 flex items-center justify-center text-xs transition-all"
                    >
                      <X className="w-2.5 h-2.5" />
                    </button>
                  </div>
                )}
                
                {filters.section && (
                  <div className="bg-blue-200 text-blue-800 px-3 py-1.5 rounded-lg text-xs font-medium flex items-center gap-2 border border-blue-200 shadow-sm hover:shadow-md transition-all">
                    <span className="font-semibold">Section:</span>
                    <span className="bg-blue-50 px-1.5 py-0.5 rounded">{filters.section}</span>
                    <button
                      onClick={() => setFilters({ ...filters, section: '' })}
                      className="ml-1 text-blue-500 hover:text-blue-700 hover:bg-blue-200 rounded-full w-4 h-4 flex items-center justify-center text-xs transition-all"
                    >
                      <X className="w-2.5 h-2.5" />
                    </button>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      )}

const InsightsSection = ({
  totalStudents,
  averageAttendanceRate,
  totalLate,
  totalAbsent,
  getAttendanceRateColor,
  iconTooltips = {}
}: {
  totalStudents: number;
  averageAttendanceRate: number;
  totalLate: number;
  totalAbsent: number;
  getAttendanceRateColor: (rate: number) => string;
  iconTooltips?: { users?: string; trending?: string; clock?: string; alert?: string; };
}) => {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
      <Card>
        <CardHeader className="pb-2">
          <div className="flex items-center justify-between">
            <CardTitle className="text-sm font-medium text-gray-500">Total Students</CardTitle>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <span><Users className="h-4 w-4 text-gray-400" /></span>
                </TooltipTrigger>
                <TooltipContent>{iconTooltips.users}</TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{totalStudents}</div>
          <p className="text-xs text-gray-500 mt-1">Active students in selected period</p>
        </CardContent>
      </Card>
      <Card>
        <CardHeader className="pb-2">
          <div className="flex items-center justify-between">
            <CardTitle className="text-sm font-medium text-gray-500">Average Attendance Rate</CardTitle>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <span><TrendingUp className="h-4 w-4 text-gray-400" /></span>
                </TooltipTrigger>
                <TooltipContent>{iconTooltips.trending}</TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{averageAttendanceRate.toFixed(1)}%</div>
          <p className="text-xs text-gray-500 mt-1">Overall attendance performance</p>
        </CardContent>
      </Card>
      <Card>
        <CardHeader className="pb-2">
          <div className="flex items-center justify-between">
            <CardTitle className="text-sm font-medium text-gray-500">Late Arrivals</CardTitle>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <span><Clock className="h-4 w-4 text-gray-400" /></span>
                </TooltipTrigger>
                <TooltipContent>{iconTooltips.clock}</TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{totalLate}</div>
          <p className="text-xs text-gray-500 mt-1">Days with late arrivals</p>
        </CardContent>
      </Card>
      <Card>
        <CardHeader className="pb-2">
          <div className="flex items-center justify-between">
            <CardTitle className="text-sm font-medium text-gray-500">Total Absences</CardTitle>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <span><AlertCircle className="h-4 w-4 text-gray-400" /></span>
                </TooltipTrigger>
                <TooltipContent>{iconTooltips.alert}</TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        </CardHeader>
        <CardContent>
          <div className="text-2xl font-bold">{totalAbsent}</div>
          <p className="text-xs text-gray-500 mt-1">Days missed</p>
        </CardContent>
      </Card>
    </div>
  );
};

const AttendanceDistribution = ({
  totalPresent,
  totalLate,
  totalAbsent
}: {
  totalPresent: number;
  totalLate: number;
  totalAbsent: number;
}) => {
  const total = totalPresent + totalLate + totalAbsent;
  const presentPercentage = (totalPresent / total) * 100;
  const latePercentage = (totalLate / total) * 100;
  const absentPercentage = (totalAbsent / total) * 100;

  return (
    <Card>
      <CardHeader>
        <CardTitle>Attendance Distribution</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div>
            <div className="flex justify-between mb-1">
              <span className="text-sm font-medium">Present</span>
              <span className="text-sm font-medium">{presentPercentage.toFixed(1)}% ({totalPresent})</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2 flex items-center" aria-label={`Present: ${presentPercentage.toFixed(1)}% (${totalPresent})`}>
              <div
                className="bg-green-500 h-2 rounded-full"
                style={{ width: `${presentPercentage}%` }}
              />
            </div>
          </div>
          <div>
            <div className="flex justify-between mb-1">
              <span className="text-sm font-medium">Late</span>
              <span className="text-sm font-medium">{latePercentage.toFixed(1)}% ({totalLate})</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2 flex items-center" aria-label={`Late: ${latePercentage.toFixed(1)}% (${totalLate})`}>
              <div
                className="bg-yellow-500 h-2 rounded-full"
                style={{ width: `${latePercentage}%` }}
              />
            </div>
          </div>
          <div>
            <div className="flex justify-between mb-1">
              <span className="text-sm font-medium">Absent</span>
              <span className="text-sm font-medium">{absentPercentage.toFixed(1)}% ({totalAbsent})</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2 flex items-center" aria-label={`Absent: ${absentPercentage.toFixed(1)}% (${totalAbsent})`}>
              <div
                className="bg-red-500 h-2 rounded-full"
                style={{ width: `${absentPercentage}%` }}
              />
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

const STATUS_COLORS: Record<string, string> = {
  Present: 'bg-green-100 text-green-700',
  Absent: 'bg-red-100 text-red-700',
  Late: 'bg-yellow-100 text-yellow-700',
};

const PAGE_SIZE = 50;

const TableHeader = ({ sortBy, setSortBy, allSelected, onSelectAll }: { 
  sortBy: 'attendance-desc' | 'attendance-asc' | 'name' | 'id' | 'status' | 'department' | 'course' | 'year-level'; 
  setSortBy: (v: 'attendance-desc' | 'attendance-asc' | 'name' | 'id' | 'status' | 'department' | 'course' | 'year-level') => void; 
  allSelected: boolean; 
  onSelectAll: () => void 
}) => {
  // Helper function to render sort indicator
  const SortIndicator = ({ active, direction = 'asc' }: { active: boolean, direction?: 'asc' | 'desc' }) => {
    if (!active) return null;
    return direction === 'asc' ? 
      <ChevronUp className="w-4 h-4 ml-1 text-blue-100" /> : 
      <ChevronDown className="w-4 h-4 ml-1 text-blue-100" />;
  };
  
  return (
    <div className="hidden md:grid grid-cols-9 items-center px-8 py-5 bg-blue-600 border-b border-blue-500 font-semibold text-white text-sm sticky top-0 z-20 shadow-md">
      {/* Selection Checkbox */}
      <div className="col-span-1 flex items-center justify-center">
        <Checkbox 
          checked={allSelected} 
          onCheckedChange={onSelectAll}
          className="border-white/30 data-[state=checked]:bg-white data-[state=checked]:border-white data-[state=checked]:text-blue-700 transition-all"
        />
      </div>
      
      {/* Student Info */}
      <div 
        className="col-span-3 cursor-pointer select-none flex items-center hover:bg-blue-700 transition-colors px-3"
        onClick={() => setSortBy(sortBy === 'name' ? 'attendance-desc' : 'name')}
      >
        <span className="flex items-center gap-1.5">
          <User className="w-4 h-4" />
          <span>Student Information</span>
          <SortIndicator active={sortBy === 'name'} />
        </span>
      </div>
      
      {/* Student ID */}
      <div 
        className="col-span-1 cursor-pointer select-none flex items-center hover:bg-blue-700 transition-colors px-3"
        onClick={() => setSortBy(sortBy === 'id' ? 'attendance-desc' : 'id')}
      >
        <span className="flex items-center gap-1.5">
          <Hash className="w-4 h-4" />
          <span>ID</span>
          <SortIndicator active={sortBy === 'id'} />
        </span>
      </div>
      
      {/* Department */}
      <div 
        className="col-span-1 cursor-pointer select-none flex items-center hover:bg-blue-700 transition-colors px-3"
        onClick={() => setSortBy(sortBy === 'department' ? 'attendance-desc' : 'department')}
      >
        <span className="flex items-center gap-1.5">
          <Building className="w-4 h-4" />
          <span>Department</span>
          <SortIndicator active={sortBy === 'department'} />
        </span>
      </div>
      
      {/* Course & Year */}
      <div 
        className="col-span-1 cursor-pointer select-none flex items-center hover:bg-blue-700 transition-colors px-3"
        onClick={() => setSortBy(sortBy === 'course' ? 'year-level' : 'course')}
      >
        <span className="flex items-center gap-1.5">
          <BookOpen className="w-4 h-4" />
          <span>Course</span>
          <SortIndicator active={sortBy === 'course' || sortBy === 'year-level'} />
        </span>
      </div>
      
      {/* Attendance Rate */}
      <div 
        className="col-span-1 cursor-pointer select-none flex items-center hover:bg-blue-700 transition-colors px-3"
        onClick={() => setSortBy(sortBy === 'attendance-desc' ? 'attendance-asc' : 'attendance-desc')}
      >
        <span className="flex items-center gap-1.5">
          <BarChart3 className="w-4 h-4" />
          <span>Attendance</span>
          <SortIndicator 
            active={sortBy === 'attendance-desc' || sortBy === 'attendance-asc'} 
            direction={sortBy === 'attendance-desc' ? 'desc' : 'asc'}
          />
        </span>
      </div>
      
      {/* Status */}
      <div 
        className="col-span-1 cursor-pointer select-none flex items-center hover:bg-blue-700 transition-colors px-3"
        onClick={() => setSortBy(sortBy === 'status' ? 'attendance-desc' : 'status')}
      >
        <span className="flex items-center gap-1.5">
          <Activity className="w-4 h-4" />
          <span>Status</span>
          <SortIndicator active={sortBy === 'status'} />
        </span>
      </div>
      
      {/* Actions */}
      <div className="col-span-1 text-center">
        <span className="flex items-center justify-center gap-1.5">
          <Settings className="w-4 h-4" />
          <span>Actions</span>
        </span>
      </div>
    </div>
  );
};

// Legacy BulkActionsBar component (replaced with enhanced inline version)
// const BulkActionsBar = ({ count, onExport, onExcuse, onNotify, onClear }: { count: number; onExport: () => void; onExcuse: () => void; onNotify: () => void; onClear: () => void }) => null;

const MobileStudentCard = ({ student, expanded, onExpand, getAttendanceRateColor }: { student: StudentAttendance; expanded: boolean; onExpand: () => void; getAttendanceRateColor: (rate: number) => string }) => {
  const status = student.attendanceRate >= 90 ? 'Present' : student.attendanceRate >= 75 ? 'Late' : 'Absent';
  
  // Format student name properly
  const displayName = student.firstName && student.lastName 
    ? `${student.firstName} ${student.middleName ? `${student.middleName.charAt(0)}. ` : ''}${student.lastName}${student.suffix ? ` ${student.suffix}` : ''}`
    : student.studentName;
    
  // Format initials for avatar
  const initials = student.firstName && student.lastName
    ? `${student.firstName[0]}${student.lastName[0]}`
    : student.studentName.split(' ').map(n => n[0]).join('');
    
  return (
    <div className="md:hidden bg-white border border-blue-100 rounded-xl shadow-sm mb-3 p-4">
      <div className="flex items-center gap-3">
        <div className="relative">
          <Avatar className="h-10 w-10 ring-1 ring-blue-100">
            <AvatarImage src={student.avatarUrl} />
            <AvatarFallback className="bg-gradient-to-br from-blue-100 to-blue-200 text-blue-700 font-bold text-sm">
              {initials}
            </AvatarFallback>
          </Avatar>
          {(student.riskLevel === RiskLevel.HIGH || student.riskLevel === 'high') && (
            <div className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center">
              <AlertTriangle className="w-2.5 h-2.5 text-white" />
            </div>
          )}
          {student.status === 'ACTIVE' && (
            <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white"></div>
          )}
        </div>
        <div className="flex-1">
          <div className="font-semibold text-blue-900 text-base">{displayName}</div>
          <div className="text-xs text-gray-500">ID: {student.studentIdNumber || student.studentId}</div>
          <div className="flex flex-wrap gap-2 mt-1">
            <span className="bg-blue-50 border border-blue-100 text-blue-700 px-2 py-1 rounded text-xs font-medium">{student.department}</span>
            <span className="bg-blue-50 border border-blue-100 text-blue-700 px-2 py-1 rounded text-xs font-medium">{student.course}</span>
            {student.yearLevel && (
              <span className="bg-blue-50 border border-blue-100 text-blue-700 px-2 py-1 rounded text-xs font-medium">
                {typeof student.yearLevel === 'string' && student.yearLevel.includes('_') 
                  ? student.yearLevel.replace('_', ' ') 
                  : student.yearLevel}
              </span>
            )}
          </div>
        </div>
        <button
          className="p-1 rounded hover:bg-blue-100"
          aria-label={expanded ? 'Hide details' : 'Show details'}
          onClick={onExpand}
        >
          {expanded ? <ChevronUp className="w-5 h-5 text-blue-700" /> : <ChevronDown className="w-5 h-5 text-blue-700" />}
        </button>
      </div>
      
      <div className="flex items-center justify-between mt-3">
        <div>
          <span className={`font-bold ${getAttendanceRateColor(student.attendanceRate)}`}>{student.attendanceRate.toFixed(1)}%</span>
          <span className="text-xs text-gray-600 ml-2">
            {student.presentDays}/{student.totalDays} days
          </span>
        </div>
        <span className={`px-2 py-1 rounded text-xs font-semibold ${STATUS_COLORS[status]}`}>{status}</span>
      </div>
      
      {student.attendanceStats && (
        <div className="flex gap-1 mt-2">
          <div className={`h-1.5 rounded-full bg-green-500`} style={{width: `${student.attendanceStats.presentPercentage}%`}}></div>
          <div className={`h-1.5 rounded-full bg-yellow-500`} style={{width: `${student.attendanceStats.latePercentage}%`}}></div>
          <div className={`h-1.5 rounded-full bg-red-500`} style={{width: `${student.attendanceStats.absentPercentage}%`}}></div>
          {student.attendanceStats.excusedPercentage > 0 && (
            <div className={`h-1.5 rounded-full bg-blue-500`} style={{width: `${student.attendanceStats.excusedPercentage}%`}}></div>
          )}
        </div>
      )}
      
      {expanded && (
        <div className="mt-4 border-t border-blue-100 pt-4 animate-fade-in">
          <div className="flex flex-col gap-2">
            <div className="flex items-center gap-2 text-sm text-gray-700">
              <Mail className="w-4 h-4 text-blue-600" /> {student.email || 'student@email.com'}
            </div>
            <div className="flex items-center gap-2 text-sm text-gray-700">
              <Phone className="w-4 h-4 text-blue-600" /> {student.phoneNumber || '+63 900 000 0000'}
            </div>
            
            {student.guardianInfo && (
              <div className="mt-2 p-2 bg-blue-50 rounded-lg">
                <div className="text-xs font-medium text-blue-800 mb-1">Guardian Information</div>
                <div className="text-xs text-gray-700">{student.guardianInfo.name} ({student.guardianInfo.relationship})</div>
                <div className="text-xs text-gray-700">{student.guardianInfo.phone}</div>
              </div>
            )}
            
            {student.academicInfo && (
              <div className="flex items-center gap-2 text-sm text-gray-700 mt-1">
                <BookOpen className="w-4 h-4 text-blue-600" /> 
                {student.academicInfo.totalSubjects} subjects
                {student.academicInfo.sectionName && (
                  <span className="text-xs bg-blue-100 text-blue-800 px-2 py-0.5 rounded">
                    Section: {student.academicInfo.sectionName}
                  </span>
                )}
              </div>
            )}
            
            {student.subjects.length > 0 && (
              <>
                <div className="text-xs font-medium text-blue-800 mt-2">Enrolled Subjects</div>
                <div className="flex flex-wrap gap-2">
                  {student.subjects.map(subj => (
                    <span key={subj} className="bg-blue-50 border border-blue-100 text-blue-700 px-2 py-1 rounded text-xs font-medium">{subj}</span>
                  ))}
                </div>
              </>
            )}
            
            <div className="text-xs text-gray-500 mt-2">
              Last Attendance: <span className="text-blue-800 font-semibold">{new Date(student.lastAttendance).toLocaleDateString()}</span>
              {student.lastAttendanceStatus && (
                <span className={`ml-2 ${
                  student.lastAttendanceStatus === AttendanceStatus.PRESENT ? 'text-green-600' :
                  student.lastAttendanceStatus === AttendanceStatus.LATE ? 'text-yellow-600' :
                  student.lastAttendanceStatus === AttendanceStatus.EXCUSED ? 'text-blue-600' :
                  'text-red-600'
                }`}>
                  ({student.lastAttendanceStatus.charAt(0) + student.lastAttendanceStatus.slice(1).toLowerCase()})
                </span>
              )}
            </div>
            
            {student.enrollmentStatus && (
              <div className="mt-2">
                <span className={`px-2 py-1 rounded text-xs font-medium ${
                  student.enrollmentStatus === EnrollmentStatus.ENROLLED ? 'bg-green-100 text-green-700' :
                  student.enrollmentStatus === EnrollmentStatus.WITHDRAWN ? 'bg-yellow-100 text-yellow-700' :
                  student.enrollmentStatus === EnrollmentStatus.GRADUATED ? 'bg-blue-100 text-blue-700' :
                  'bg-red-100 text-red-700'
                }`}>
                  {typeof student.enrollmentStatus === 'string' 
                    ? student.enrollmentStatus.charAt(0) + student.enrollmentStatus.slice(1).toLowerCase() 
                    : student.enrollmentStatus}
                </span>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

const ReportList = ({
  filteredStudents,
  getAttendanceRateColor,
  loading,
  sortBy,
  setSortBy,
  selected,
  setSelected,
  allSelected,
  onSelectAll,
  expandedStudentId,
  setExpandedStudentId,
  onStudentClick
}: {
  filteredStudents: StudentAttendance[];
  getAttendanceRateColor: (rate: number) => string;
  loading: boolean;
  sortBy: 'attendance-desc' | 'attendance-asc' | 'name' | 'id' | 'status' | 'department' | 'course' | 'year-level';
  setSortBy: (v: 'attendance-desc' | 'attendance-asc' | 'name' | 'id' | 'status' | 'department' | 'course' | 'year-level') => void;
  selected: Set<string>;
  setSelected: (s: Set<string>) => void;
  allSelected: boolean;
  onSelectAll: () => void;
  expandedStudentId: string | null;
  setExpandedStudentId: (id: string | null) => void;
  onStudentClick: (student: StudentAttendance) => void;
}) => {
  // Risk level badge helper with enhanced colors
  const getRiskBadgeColor = (risk?: RiskLevel | string) => {
    switch (risk) {
      case RiskLevel.HIGH:
      case 'high': 
        return 'bg-red-100 text-red-800 border-red-200 ring-1 ring-red-300';
      case RiskLevel.MEDIUM:
      case 'medium': 
        return 'bg-yellow-100 text-yellow-800 border-yellow-200 ring-1 ring-yellow-300';
      case RiskLevel.LOW:
      case 'low': 
        return 'bg-blue-100 text-blue-800 border-blue-200 ring-1 ring-blue-300';
      case RiskLevel.NONE:
      case 'none':
      default: 
        return 'bg-green-100 text-green-800 border-green-200 ring-1 ring-green-300';
    }
  };

  // Enhanced loading skeletons
  if (loading) {
    return (
      <div className="p-6 space-y-4">
        {/* Desktop loading skeleton */}
        <div className="hidden md:block space-y-3">
          <div className="grid grid-cols-8 gap-4 p-4 bg-blue-50 rounded-xl">
            {Array.from({ length: 8 }).map((_, i) => (
              <Skeleton key={i} className="h-6 w-full rounded-lg bg-blue-200" />
            ))}
          </div>
          {Array.from({ length: 6 }).map((_, i) => (
            <div key={i} className="grid grid-cols-8 gap-4 p-4 bg-white border border-blue-100 rounded-xl hover:shadow-sm transition-shadow">
              {Array.from({ length: 8 }).map((_, j) => (
                <Skeleton key={j} className="h-8 w-full rounded-lg" />
              ))}
            </div>
          ))}
        </div>
        
        {/* Mobile loading skeleton */}
        <div className="md:hidden space-y-4">
          {Array.from({ length: 4 }).map((_, i) => (
            <div key={i} className="bg-white border border-blue-100 rounded-2xl shadow-sm p-6">
              <div className="flex items-center gap-4 mb-4">
                <Skeleton className="h-12 w-12 rounded-full" />
                <div className="flex-1 space-y-2">
                  <Skeleton className="h-5 w-32" />
                  <Skeleton className="h-4 w-24" />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-3">
                <Skeleton className="h-6 w-full rounded-lg" />
                <Skeleton className="h-6 w-full rounded-lg" />
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  // Enhanced empty state
  if (!loading && filteredStudents.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center py-20 text-center">
        <div className="w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mb-6">
          <Info className="w-10 h-10 text-blue-400" />
        </div>
        <div className="text-2xl font-bold text-blue-900 mb-3">No students found</div>
        <div className="text-blue-600 mb-6 max-w-md">
          Try adjusting your search criteria or filters to find the students you're looking for.
        </div>
        <Button 
          variant="outline" 
          className="border-blue-300 text-blue-700 hover:bg-blue-50"
          onClick={() => window.location.reload()}
        >
          <RefreshCw className="w-4 h-4 mr-2" />
          Refresh Data
        </Button>
      </div>
    );
  }

  // Enhanced virtualized row renderer
  const Row = ({ index, style }: ListChildComponentProps) => {
    const student = filteredStudents[index];
    if (!student) return null;
    
    const status = student.attendanceRate >= 90 ? 'Present' : student.attendanceRate >= 75 ? 'Late' : 'Absent';
    const checked = selected.has(student.id);
    const expanded = expandedStudentId === student.id;
    const isEvenRow = index % 2 === 0;
    
    return (
      <div style={style} key={student.id}>
        {/* Enhanced Desktop Row */}
        <div
          className={`grid grid-cols-9 items-center px-8 py-6 text-sm border-b border-gray-200 hidden md:grid cursor-pointer transition-colors group hover:bg-blue-50 relative ${
            isEvenRow 
              ? 'bg-white' 
              : 'bg-gray-50/50'
          } ${checked ? 'bg-blue-50 border-blue-200' : ''}`}
          onClick={(e) => {
            e.preventDefault();
            onStudentClick(student);
          }}
        >
          {/* Selection Checkbox */}
          <div className="col-span-1 flex items-center justify-center">
            <Checkbox 
              checked={checked} 
              onCheckedChange={() => {
                const newSet = new Set(selected);
                if (checked) newSet.delete(student.id);
                else newSet.add(student.id);
                setSelected(newSet);
              }}
              className="w-5 h-5 border-2 border-blue-300 data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600 transition-all group-hover:border-blue-400"
            />
          </div>
          
          {/* Student Information */}
          <div className="col-span-3 flex items-center gap-4">
            <div className="relative">
              <Avatar className="h-10 w-10 ring-1 ring-gray-200">
                <AvatarImage src={student.avatarUrl} className="object-cover" />
                <AvatarFallback className="bg-blue-100 text-blue-700 font-bold text-sm">
                  {`${student.firstName?.[0] || ''}${student.lastName?.[0] || ''}` || student.studentName.split(' ').map(n => n[0]).join('')}
                </AvatarFallback>
              </Avatar>
              {(student.riskLevel === RiskLevel.HIGH || student.riskLevel === 'high') && (
                <div className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center">
                  <AlertTriangle className="w-2.5 h-2.5 text-white" />
                </div>
              )}
              {student.status === 'ACTIVE' && (
                <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border border-white"></div>
              )}
            </div>
            <div className="flex flex-col min-w-0 flex-1">
              <div className="font-semibold text-gray-900 group-hover:text-blue-700 transition-colors truncate flex items-center gap-1">
                <span>
                  {student.firstName && student.lastName 
                    ? `${student.firstName} ${student.middleName ? `${student.middleName.charAt(0)}. ` : ''}${student.lastName}${student.suffix ? ` ${student.suffix}` : ''}`
                    : student.studentName}
                </span>
                {student.gender && (
                  <span className={`w-4 h-4 rounded-full flex items-center justify-center text-xs ${
                    student.gender === UserGender.MALE || student.gender === 'MALE' ? 'bg-blue-100 text-blue-700' : 
                    student.gender === UserGender.FEMALE || student.gender === 'FEMALE' ? 'bg-pink-100 text-pink-700' : 
                    'bg-purple-100 text-purple-700'
                  }`}>
                    {student.gender === UserGender.MALE || student.gender === 'MALE' ? '♂' : 
                     student.gender === UserGender.FEMALE || student.gender === 'FEMALE' ? '♀' : '⚧'}
                  </span>
                )}
              </div>
              <div className="text-sm text-gray-600 truncate">
                {student.email}
              </div>
              <div className="flex items-center gap-1 mt-1">
                {student.riskLevel && student.riskLevel !== RiskLevel.NONE && student.riskLevel !== 'none' && (
                  <Badge className={`${getRiskBadgeColor(student.riskLevel)} text-xs px-1.5 py-0.5 font-medium`}>
                    {typeof student.riskLevel === 'string' && student.riskLevel.includes('_') 
                      ? student.riskLevel.replace('_', ' ').toUpperCase() 
                      : student.riskLevel.toUpperCase()}
                  </Badge>
                )}

                {student.studentType && (
                  <Badge className="bg-blue-100 text-blue-700 text-xs px-1.5 py-0.5 font-medium">
                    {typeof student.studentType === 'string' && student.studentType.includes('_') 
                      ? student.studentType.replace('_', ' ') 
                      : student.studentType}
                  </Badge>
                )}
              </div>
            </div>
          </div>
          
          {/* Student ID */}
          <div className="col-span-1 px-3">
            <div className="font-mono text-sm text-gray-700">
              {student.studentIdNumber || student.studentId}
            </div>
            {student.rfidTag && (
              <div className="text-xs text-gray-500 mt-2 flex items-center gap-1">
                <Shield className="w-3 h-3" />
                <span className="font-mono">{student.rfidTag}</span>
              </div>
            )}
          </div>
          
          {/* Department */}
          <div className="col-span-1 px-3">
            <div className="text-gray-900 font-medium">
              {student.department}
            </div>
            {student.academicInfo?.sectionName && (
              <div className="text-xs text-gray-500 mt-2">
                Section: {student.academicInfo.sectionName}
              </div>
            )}
          </div>
          
          {/* Course & Year Level */}
          <div className="col-span-1 px-3">
            <div className="text-gray-900 font-medium">
              {student.course}
            </div>
            <div className="text-sm text-gray-600 mt-1">
              {typeof student.yearLevel === 'string' && student.yearLevel.includes('_') 
                ? student.yearLevel.replace('_', ' ') 
                : student.yearLevel}
            </div>
            {student.academicInfo?.totalSubjects && (
              <div className="text-xs text-gray-500 mt-1">
                {student.academicInfo.totalSubjects} subjects
              </div>
            )}
          </div>
          
          {/* Attendance Rate */}
          <div className="col-span-1 px-3">
            <div className={`font-bold text-lg ${getAttendanceRateColor(student.attendanceRate)}`}>
              {student.attendanceRate.toFixed(1)}%
            </div>
            <div className="text-xs text-gray-600 mt-2">
              {student.presentDays} present, {student.lateDays} late, {student.absentDays} absent
            </div>
            {student.trend && (
              <div className={`text-xs mt-2 flex items-center gap-1 ${
                student.trend > 0 ? 'text-green-600' : 'text-red-600'
              }`}>
                <TrendingUp className={`w-3 h-3 ${student.trend < 0 ? 'rotate-180' : ''}`} />
                {Math.abs(student.trend).toFixed(1)}%
              </div>
            )}
            
            {student.attendanceStats && (
              <div className="flex h-2 rounded-sm overflow-hidden mt-3">
                <div className={`bg-green-500`} style={{width: `${student.attendanceStats.presentPercentage}%`}}></div>
                <div className={`bg-yellow-500`} style={{width: `${student.attendanceStats.latePercentage}%`}}></div>
                <div className={`bg-red-500`} style={{width: `${student.attendanceStats.absentPercentage}%`}}></div>
                {student.attendanceStats.excusedPercentage > 0 && (
                  <div className={`bg-blue-500`} style={{width: `${student.attendanceStats.excusedPercentage}%`}}></div>
                )}
              </div>
            )}
          </div>
          
          {/* Status */}
          <div className="col-span-1 px-3">
            <span className={`px-3 py-1 rounded-full text-xs font-medium inline-flex items-center gap-1.5 ${STATUS_COLORS[status]}`}>
              <div className={`w-1.5 h-1.5 rounded-full ${
                status === 'Present' ? 'bg-green-500' : 
                status === 'Late' ? 'bg-yellow-500' : 'bg-red-500'
              }`}></div>
              {status}
            </span>
            
            {student.lastAttendanceStatus && (
              <div className="text-xs text-gray-600 mt-2">
                Last: <span className={`font-medium ${
                  student.lastAttendanceStatus === AttendanceStatus.PRESENT ? 'text-green-600' :
                  student.lastAttendanceStatus === AttendanceStatus.LATE ? 'text-yellow-600' :
                  student.lastAttendanceStatus === AttendanceStatus.EXCUSED ? 'text-blue-600' :
                  'text-red-600'
                }`}>
                  {student.lastAttendanceStatus.charAt(0) + student.lastAttendanceStatus.slice(1).toLowerCase()}
                </span>
              </div>
            )}
            
            {student.enrollmentStatus && (
              <div className="mt-2">
                <span className={`px-2 py-0.5 rounded text-xs ${
                  student.enrollmentStatus === EnrollmentStatus.ENROLLED ? 'bg-green-100 text-green-700' :
                  student.enrollmentStatus === EnrollmentStatus.WITHDRAWN ? 'bg-yellow-100 text-yellow-700' :
                  student.enrollmentStatus === EnrollmentStatus.GRADUATED ? 'bg-blue-100 text-blue-700' :
                  'bg-red-100 text-red-700'
                }`}>
                  {typeof student.enrollmentStatus === 'string' 
                    ? student.enrollmentStatus.charAt(0) + student.enrollmentStatus.slice(1).toLowerCase() 
                    : student.enrollmentStatus}
                </span>
              </div>
            )}
          </div>
          
          {/* Actions */}
          <div className="col-span-1 flex justify-center items-center">
            <div className="opacity-0 group-hover:opacity-100 transition-opacity">
              <button
                className="p-1.5 rounded hover:bg-gray-100"
                aria-label={expanded ? 'Hide details' : 'Show details'}
                onClick={(e) => {
                  e.stopPropagation();
                  setExpandedStudentId(expanded ? null : student.id);
                }}
              >
                {expanded ? (
                  <ChevronUp className="w-4 h-4 text-gray-600" />
                ) : (
                  <ChevronDown className="w-4 h-4 text-gray-600" />
                )}
              </button>
            </div>
          </div>
        </div>
        
        {/* Enhanced Mobile Card */}
        <div className="md:hidden" onClick={() => onStudentClick(student)}>
          <div className={`bg-white border-2 border-blue-100 rounded-2xl shadow-sm mb-4 p-4 hover:shadow-lg hover:border-blue-300 transition-all duration-200 cursor-pointer ${
            checked ? 'border-blue-400 bg-blue-50' : ''
          }`}>
            <div className="flex items-start justify-between mb-4">
              <div className="flex items-center gap-4">
                                 <Checkbox 
                   checked={checked} 
                   onCheckedChange={() => {
                     const newSet = new Set(selected);
                     if (checked) newSet.delete(student.id);
                     else newSet.add(student.id);
                     setSelected(newSet);
                   }}
                   className="w-5 h-5 border-2 border-blue-300"
                 />
                <div className="relative">
                  <Avatar className="h-12 w-12 ring-2 ring-white shadow-sm">
                    <AvatarImage src={student.avatarUrl} />
                    <AvatarFallback className="bg-blue-100 text-blue-700 font-semibold">
                      {student.studentName.split(' ').map(n => n[0]).join('')}
                    </AvatarFallback>
                  </Avatar>
                  {(student.riskLevel === RiskLevel.HIGH || student.riskLevel === 'high') && (
                    <div className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center">
                      <AlertTriangle className="w-2.5 h-2.5 text-white" />
                    </div>
                  )}
                </div>
                <div>
                  <div className="font-bold text-blue-900 text-lg">{student.studentName}</div>
                  <div className="text-sm text-gray-600 font-mono">{student.studentId}</div>
                </div>
              </div>
              <button
                className="p-2 rounded-lg hover:bg-blue-100 transition-colors"
                onClick={(e) => {
                  e.stopPropagation();
                  setExpandedStudentId(expanded ? null : student.id);
                }}
              >
                {expanded ? (
                  <ChevronUp className="w-5 h-5 text-blue-700" />
                ) : (
                  <ChevronDown className="w-5 h-5 text-blue-700" />
                )}
              </button>
            </div>
            
            <div className="grid grid-cols-2 gap-4 mb-4">
              <div>
                <div className="text-xs text-gray-500 font-medium uppercase tracking-wide">Department</div>
                <div className="text-sm font-semibold text-gray-900">{student.department}</div>
              </div>
              <div>
                <div className="text-xs text-gray-500 font-medium uppercase tracking-wide">Course</div>
                <div className="text-sm font-semibold text-gray-900">{student.course}</div>
              </div>
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className={`text-2xl font-bold ${getAttendanceRateColor(student.attendanceRate)}`}>
                  {student.attendanceRate.toFixed(1)}%
                </div>
                <span className={`px-3 py-1 rounded-full text-xs font-bold ${STATUS_COLORS[status]}`}>
                  {status}
                </span>
              </div>
              <div className="flex gap-2">
                {student.riskLevel && student.riskLevel !== 'none' && (
                  <Badge className={`${getRiskBadgeColor(student.riskLevel)} text-xs px-2 py-1`}>
                    {student.riskLevel}
                  </Badge>
                )}

              </div>
            </div>
          </div>
        </div>
        
        {/* Enhanced Expanded Details */}
        {expanded && (
          <div className="hidden md:block bg-gradient-to-r from-blue-50 to-white border-2 border-blue-200 rounded-2xl shadow-lg p-8 mb-4 mx-4 animate-fade-in">
            <div className="flex flex-col lg:flex-row gap-8">
              {/* Student Profile Section */}
              <div className="flex flex-col items-center lg:items-start gap-4 lg:min-w-[200px]">
                <Avatar className="h-20 w-20 ring-4 ring-white shadow-lg">
                  <AvatarImage src={student.avatarUrl} />
                  <AvatarFallback className="bg-blue-100 text-blue-700 font-bold text-lg">
                    {student.studentName.split(' ').map(n => n[0]).join('')}
                  </AvatarFallback>
                </Avatar>
                <div className="text-center lg:text-left">
                  <div className="font-bold text-blue-900 text-xl mb-1">{student.studentName}</div>
                  <div className="text-sm text-gray-600 font-mono bg-gray-100 px-2 py-1 rounded-lg inline-block">
                    ID: {student.studentId}
                  </div>
                </div>
                <div className="flex flex-col gap-2 w-full">
                  <div className="flex items-center gap-2 text-sm text-gray-700 bg-white px-3 py-2 rounded-lg border border-gray-200">
                    <Mail className="w-4 h-4 text-blue-500" />
                    <span className="truncate">{student.email || 'student@email.com'}</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm text-gray-700 bg-white px-3 py-2 rounded-lg border border-gray-200">
                    <Phone className="w-4 h-4 text-green-500" />
                    <span>{student.phoneNumber || '+63 900 000 0000'}</span>
                  </div>
                </div>
              </div>
              
              {/* Details Grid */}
              <div className="flex-1 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <div className="bg-white p-4 rounded-xl border border-blue-200 shadow-sm">
                  <div className="text-xs text-gray-500 font-bold uppercase tracking-wide mb-2">Academic Info</div>
                  <div className="space-y-2">
                    <div>
                      <span className="text-sm text-gray-600">Department:</span>
                      <div className="font-semibold text-blue-800">{student.department}</div>
                    </div>
                    <div>
                      <span className="text-sm text-gray-600">Course:</span>
                      <div className="font-semibold text-blue-800">{student.course}</div>
                    </div>
                    <div>
                      <span className="text-sm text-gray-600">Year Level:</span>
                      <div className="font-semibold text-blue-800">{student.yearLevel}</div>
                    </div>
                  </div>
                </div>
                
                <div className="bg-white p-4 rounded-xl border border-blue-200 shadow-sm">
                  <div className="text-xs text-gray-500 font-bold uppercase tracking-wide mb-2">Performance</div>
                  <div className="space-y-2">
                    <div>
                      <span className="text-sm text-gray-600">Attendance Rate:</span>
                      <div className={`font-bold text-lg ${getAttendanceRateColor(student.attendanceRate)}`}>
                        {student.attendanceRate.toFixed(1)}%
                      </div>
                    </div>
                    <div>
                      <span className="text-sm text-gray-600">Current Status:</span>
                      <div>
                        <span className={`px-2 py-1 rounded text-xs font-bold ${STATUS_COLORS[status]}`}>
                          {status}
                        </span>
                      </div>
                    </div>

                  </div>
                </div>
                
                <div className="bg-white p-4 rounded-xl border border-blue-200 shadow-sm">
                  <div className="text-xs text-gray-500 font-bold uppercase tracking-wide mb-2">Activity</div>
                  <div className="space-y-2">
                    <div>
                      <span className="text-sm text-gray-600">Last Attendance:</span>
                      <div className="font-semibold text-blue-800">
                        {new Date(student.lastAttendance).toLocaleDateString()}
                      </div>
                    </div>
                    {student.riskLevel && student.riskLevel !== 'none' && (
                      <div>
                        <span className="text-sm text-gray-600">Risk Level:</span>
                        <div>
                          <Badge className={`${getRiskBadgeColor(student.riskLevel)} text-xs px-2 py-1`}>
                            {student.riskLevel.toUpperCase()}
                          </Badge>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
            
            {/* Subjects Section */}
            <div className="mt-6 pt-6 border-t border-blue-200">
              <div className="text-xs text-gray-500 font-bold uppercase tracking-wide mb-3">Enrolled Subjects</div>
              <div className="flex flex-wrap gap-2">
                {student.subjects.map((subj, idx) => (
                  <span 
                    key={subj} 
                    className="bg-blue-50 border border-blue-200 text-blue-700 px-3 py-1.5 rounded-lg text-sm font-medium hover:bg-blue-100 transition-colors"
                  >
                    {subj}
                  </span>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  return (
    <Card className="border-0 shadow-none">
      <CardContent style={{ height: 600, padding: 0 }}>
        <TableHeader sortBy={sortBy} setSortBy={setSortBy} allSelected={allSelected} onSelectAll={onSelectAll} />
        <AutoSizer disableHeight>
          {({ width }: { width: number }) => (
            <List
              height={520}
              itemCount={filteredStudents.length}
              itemSize={120}
              width={width || '100%'}
            >
              {Row}
            </List>
          )}
        </AutoSizer>
      </CardContent>
    </Card>
  );
};

export default function StudentAttendancePage() {
  const [searchQuery, setSearchQuery] = useState('');
  const [dateRange, setDateRange] = useState<DateRange>({
    start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    end: new Date().toISOString().split('T')[0]
  });
  const [filters, setFilters] = useState<Filters>({
    department: '',
    course: '',
    yearLevel: '',
    attendanceRate: '',
    riskLevel: '',
    studentStatus: '',
    studentType: '',
    section: ''
  });
  const [loading, setLoading] = useState(true);
  const [sortBy, setSortBy] = useState<'attendance-desc' | 'attendance-asc' | 'name' | 'id' | 'status' | 'department' | 'course' | 'year-level'>('attendance-desc');
  const [pdfLoading, setPdfLoading] = useState(false);
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(50);
  const [selected, setSelected] = useState<Set<string>>(new Set());
  const [expandedStudentId, setExpandedStudentId] = useState<string | null>(null);
  const [selectedStudent, setSelectedStudent] = useState<StudentAttendance | null>(null);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [showRealTimeStatus, setShowRealTimeStatus] = useState(false);
  const [showNotificationSystem, setShowNotificationSystem] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [autoRefresh, setAutoRefresh] = useState(false);
  const [refreshInterval, setRefreshInterval] = useState<NodeJS.Timeout | null>(null);
  const [currentTime, setCurrentTime] = useState<string>('');
  const [mounted, setMounted] = useState(false);
  // Add state for dashboard visibility
  const [dashboardExpanded, setDashboardExpanded] = useState(true);
  const [searchFilterExpanded, setSearchFilterExpanded] = useState(true);
  const [reportExpanded, setReportExpanded] = useState(true);
  const [quickActionsExpanded, setQuickActionsExpanded] = useState(true);
  const [activeFilterTab, setActiveFilterTab] = useState('search');
  const [recentSearches, setRecentSearches] = useState<string[]>(['john doe', 'STU-2024', 'computer science', 'jane smith']);
  
  // Enhanced Analytics States
  const [activeAnalyticsTab, setActiveAnalyticsTab] = useState('department');
  const [analyticsSearchQuery, setAnalyticsSearchQuery] = useState('');
  const [analyticsSortBy, setAnalyticsSortBy] = useState<'name' | 'rate' | 'total'>('rate');
  const [analyticsTimeRange, setAnalyticsTimeRange] = useState('today');
  const [drillDownPath, setDrillDownPath] = useState<string[]>([]);
  const [showTrends, setShowTrends] = useState(true);
  const [thresholdAlert, setThresholdAlert] = useState(80);
  const [isAnalyticsDialogOpen, setIsAnalyticsDialogOpen] = useState(false);

  // Debounced search
  const debouncedSearch = useDebounce(searchQuery, 300);

  // Handle adding search to recent searches
  const addToRecentSearches = (query: string) => {
    if (query.trim() && query.length >= 2) {
      setRecentSearches(prev => {
        const filtered = prev.filter(item => item.toLowerCase() !== query.toLowerCase());
        return [query.trim(), ...filtered].slice(0, 6); // Keep only 6 recent searches
      });
    }
  };

  // Handle search query change
  const handleSearchChange = (query: string) => {
    setSearchQuery(query);
  };

  // Add to recent searches when search query changes (debounced)
  useEffect(() => {
    if (debouncedSearch.trim() && debouncedSearch.length >= 2) {
      addToRecentSearches(debouncedSearch);
    }
  }, [debouncedSearch]);

  useEffect(() => {
    setLoading(true);
    const timer = setTimeout(() => setLoading(false), 800);
    return () => clearTimeout(timer);
  }, [searchQuery, filters, dateRange]);

  // Set current time on client side to avoid hydration mismatch
  useEffect(() => {
    setMounted(true);
    setCurrentTime(new Date().toLocaleString());
    
    // Update the time every minute
    const interval = setInterval(() => {
      setCurrentTime(new Date().toLocaleString());
    }, 60000);
    
    return () => clearInterval(interval);
  }, []);

  // Extract unique values for filters
  const departments = Array.from(new Set(mockStudents.map(student => student.department)));
  const courses = Array.from(new Set(mockStudents.map(student => student.course)));
  const yearLevels = Array.from(new Set(mockStudents.map(student => student.yearLevel)));
  const riskLevels = Array.from(new Set(mockStudents.map(student => student.riskLevel).filter(Boolean))) as string[];
  const studentStatuses = Array.from(new Set(mockStudents.map(student => student.status)));
  const studentTypes = Array.from(new Set(mockStudents.map(student => student.studentType).filter(Boolean))) as string[];
  const sections = Array.from(new Set(mockStudents.map(student => student.academicInfo?.sectionName).filter(Boolean))) as string[];

  // Memoize filtered/sorted data
  const filteredStudents = useMemo(() => {
    return mockStudents.filter(student => {
      const attendanceDate = student.lastAttendance.split('T')[0];
      const inDateRange = attendanceDate >= dateRange.start && attendanceDate <= dateRange.end;
      const matchesSearch = student.studentName.toLowerCase().includes(debouncedSearch.toLowerCase()) ||
        student.studentId.toLowerCase().includes(debouncedSearch.toLowerCase()) ||
        student.email.toLowerCase().includes(debouncedSearch.toLowerCase()) ||
        student.department.toLowerCase().includes(debouncedSearch.toLowerCase()) ||
        student.course.toLowerCase().includes(debouncedSearch.toLowerCase());
      const matchesDepartment = !filters.department || student.department === filters.department;
      const matchesCourse = !filters.course || student.course === filters.course;
      const matchesYearLevel = !filters.yearLevel || student.yearLevel === filters.yearLevel;
      const matchesRiskLevel = !filters.riskLevel || student.riskLevel?.toString().toLowerCase() === filters.riskLevel.toLowerCase();
      const matchesStudentStatus = !filters.studentStatus || student.status === filters.studentStatus;
      const matchesStudentType = !filters.studentType || student.studentType === filters.studentType;
      const matchesSection = !filters.section || student.academicInfo?.sectionName === filters.section;
      
      let matchesAttendanceRate = true;
      if (filters.attendanceRate) {
        switch (filters.attendanceRate) {
          case 'high':
            matchesAttendanceRate = student.attendanceRate >= 90;
            break;
          case 'medium':
            matchesAttendanceRate = student.attendanceRate >= 75 && student.attendanceRate < 90;
            break;
          case 'low':
            matchesAttendanceRate = student.attendanceRate < 75;
            break;
        }
      }
      return inDateRange && matchesSearch && matchesDepartment && matchesCourse && matchesYearLevel && matchesAttendanceRate && matchesRiskLevel && matchesStudentStatus && matchesStudentType && matchesSection;
    });
  }, [mockStudents, debouncedSearch, filters, dateRange]);

  // Update sortedStudents to handle new sort options
  const sortedStudents = useMemo(() => {
    const arr = [...filteredStudents];
    if (sortBy === 'attendance-desc') return arr.sort((a, b) => b.attendanceRate - a.attendanceRate);
    if (sortBy === 'attendance-asc') return arr.sort((a, b) => a.attendanceRate - b.attendanceRate);
    if (sortBy === 'name') return arr.sort((a, b) => a.studentName.localeCompare(b.studentName));
    if (sortBy === 'id') return arr.sort((a, b) => a.studentId.localeCompare(b.studentId));
    if (sortBy === 'department') return arr.sort((a, b) => a.department.localeCompare(b.department));
    if (sortBy === 'course') return arr.sort((a, b) => a.course.localeCompare(b.course));
    if (sortBy === 'year-level') return arr.sort((a, b) => a.yearLevel.localeCompare(b.yearLevel));
    if (sortBy === 'status') return arr.sort((a, b) => {
      const getStatus = (s: StudentAttendance) => s.attendanceRate >= 90 ? 0 : s.attendanceRate >= 75 ? 1 : 2;
      return getStatus(a) - getStatus(b);
    });
    return arr;
  }, [filteredStudents, sortBy]);

  // Pagination
  const totalPages = Math.ceil(sortedStudents.length / pageSize);
  const paginatedStudents = sortedStudents.slice((page - 1) * pageSize, page * pageSize);
  const rangeStart = sortedStudents.length === 0 ? 0 : (page - 1) * pageSize + 1;
  const rangeEnd = Math.min(page * pageSize, sortedStudents.length);

  // Calculate statistics
  const totalStudents = filteredStudents.length;
  const averageAttendanceRate = filteredStudents.reduce((acc, student) => acc + student.attendanceRate, 0) / totalStudents || 0;
  const totalLate = filteredStudents.reduce((acc, student) => acc + student.lateDays, 0);
  const totalAbsent = filteredStudents.reduce((acc, student) => acc + student.absentDays, 0);
  const totalPresent = filteredStudents.reduce((acc, student) => acc + student.presentDays, 0);

  const getAttendanceRateColor = (rate: number) => {
    if (rate >= 90) return 'text-green-600';
    if (rate >= 75) return 'text-yellow-600';
    return 'text-red-600';
  };

  // Clear filters handler
  const handleClearFilters = () => {
    setSearchQuery('');
    setFilters({ 
      department: '', 
      course: '', 
      yearLevel: '', 
      attendanceRate: '',
      riskLevel: '',
      studentStatus: '',
      studentType: '',
      section: ''
    });
    setDateRange({
      start: '',
      end: ''
    });
  };

  // Print handler
  const handlePrint = () => {
    window.print();
  };

  // Export to CSV handler
  const handleExportCSV = () => {
    const headers = [
      'Name', 'ID', 'Department', 'Course', 'Year Level', 'Attendance Rate', 'Present', 'Late', 'Absent', 'Total Days', 'Last Attendance'
    ];
    const rows = sortedStudents.map(stu => [
      stu.studentName,
      stu.studentId,
      stu.department,
      stu.course,
      stu.yearLevel,
      stu.attendanceRate + '%',
      stu.presentDays,
      stu.lateDays,
      stu.absentDays,
      stu.totalDays,
      new Date(stu.lastAttendance).toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' })
    ]);
    const csvContent = [headers, ...rows].map(e => e.map(v => `"${String(v).replace(/"/g, '""')}"`).join(',')).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'student-attendance-report.csv';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // Export to PDF handler
  const handleExportPDF = async () => {
    setPdfLoading(true);
    const input = document.getElementById('report-section');
    if (!input) {
      setPdfLoading(false);
      alert('Report section not found.');
      return;
    }
    try {
      const canvas = await html2canvas(input, { scale: 2, useCORS: true });
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF({ orientation: 'landscape', unit: 'pt', format: 'a4' });
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      // Calculate image dimensions to fit page
      const imgWidth = pageWidth;
      const imgHeight = (canvas.height * pageWidth) / canvas.width;
      let remainingHeight = imgHeight - pageHeight;
      let pageY = 0;
      while (remainingHeight > 0) {
        pageY = pageY - pageHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, pageY, imgWidth, imgHeight);
        remainingHeight -= pageHeight;
      }
      pdf.save('student-attendance-report.pdf');
    } catch (err) {
      alert('Failed to export PDF.');
    }
    setPdfLoading(false);
  };

  const allSelected = paginatedStudents.length > 0 && paginatedStudents.every(s => selected.has(s.id));
  const onSelectAll = () => {
    if (allSelected) {
      setSelected(new Set());
    } else {
      setSelected(new Set(paginatedStudents.map(s => s.id)));
    }
  };

  const handleStudentClick = (student: StudentAttendance) => {
    setSelectedStudent(student);
    setIsDetailModalOpen(true);
  };

  const handleStudentUpdate = (studentId: string, updates: Partial<StudentAttendance>) => {
    // Implementation for updating student data
    console.log('Updating student:', studentId, updates);
  };

  const handleSendNotification = (studentId: string, type: string, message: string) => {
    // Implementation for sending notification
    console.log('Sending notification:', { studentId, type, message });
  };

  // Add mock data for enhanced dashboard features
  const hourlyTrends = Array.from({ length: 24 }).map((_, i) => ({
    hour: i,
    present: Math.floor(Math.random() * 50) + 20,
    late: Math.floor(Math.random() * 10),
    absent: Math.floor(Math.random() * 15)
  }));

  const recentActivity = [
    { id: 1, student: 'Alice Johnson', action: 'checked in', time: '2 min ago', status: 'present', department: 'Computer Science' },
    { id: 2, student: 'Bob Smith', action: 'checked in late', time: '5 min ago', status: 'late', department: 'Information Technology' },
    { id: 3, student: 'Carol Davis', action: 'checked out early', time: '8 min ago', status: 'early_leave', department: 'Computer Science' },
    { id: 4, student: 'David Wilson', action: 'checked in', time: '12 min ago', status: 'present', department: 'Information Technology' },
    { id: 5, student: 'Eva Chen', action: 'checked in late', time: '15 min ago', status: 'late', department: 'Computer Science' }
  ];

  const departmentBreakdown = [
    { name: 'Computer Science', present: 42, total: 50, rate: 84 },
    { name: 'Information Technology', present: 38, total: 45, rate: 84.4 },
    { name: 'Engineering', present: 35, total: 40, rate: 87.5 },
    { name: 'Business', present: 28, total: 35, rate: 80 }
  ];

  const peakHours = [
    { time: '8:00 AM', count: 45, type: 'Peak Check-in' },
    { time: '12:00 PM', count: 38, type: 'Lunch Break' },
    { time: '5:00 PM', count: 42, type: 'Peak Check-out' }
  ];

  // Enhanced Dashboard Components
  const MiniTrendChart = ({ data, color, height = 40 }: { data: any[], color: string, height?: number }) => (
    <ResponsiveContainer width="100%" height={height}>
      <LineChart data={data.slice(-12)}>
        <Line 
          type="monotone" 
          dataKey="value" 
          stroke={color} 
          strokeWidth={2} 
          dot={false}
          strokeOpacity={0.8}
        />
      </LineChart>
    </ResponsiveContainer>
  );

  // Enhanced Analytics Data with trends and drill-down capability
  const getAnalyticsData = (tab: string, timeRange: string = 'today') => {
    const baseData = {
      department: [
        { id: 'cs', name: 'Computer Science', present: 42, total: 50, rate: 84, trend: 2.1, children: ['BSCS', 'MSCS'] },
        { id: 'it', name: 'Information Technology', present: 38, total: 45, rate: 84.4, trend: -0.5, children: ['BSIT', 'MIT'] },
        { id: 'eng', name: 'Engineering', present: 35, total: 40, rate: 87.5, trend: 1.3, children: ['BSCpE', 'BSEE'] },
        { id: 'bus', name: 'Business', present: 28, total: 35, rate: 80, trend: -1.2, children: ['BSBA', 'BSAC'] }
      ],
      year: [
        { id: 'first', name: 'First Year', present: 145, total: 160, rate: 90.6, trend: 3.2, children: ['CS101', 'IT101'] },
        { id: 'second', name: 'Second Year', present: 128, total: 145, rate: 88.3, trend: 1.7, children: ['CS201', 'IT201'] },
        { id: 'third', name: 'Third Year', present: 112, total: 135, rate: 83.0, trend: -2.1, children: ['CS301', 'IT301'] },
        { id: 'fourth', name: 'Fourth Year', present: 98, total: 110, rate: 89.1, trend: 0.8, children: ['CS401', 'IT401'] }
      ],
      course: [
        { id: 'bscs', name: 'BSCS', present: 89, total: 105, rate: 84.8, trend: 1.5, children: ['CS101-A', 'CS201-A'] },
        { id: 'bsit', name: 'BSIT', present: 76, total: 85, rate: 89.4, trend: 2.3, children: ['IT101-A', 'IT201-A'] },
        { id: 'bscpe', name: 'BSCpE', present: 54, total: 65, rate: 83.1, trend: -0.7, children: ['CPE101-A'] },
        { id: 'bsee', name: 'BSEE', present: 43, total: 50, rate: 86.0, trend: 1.9, children: ['EE101-A'] }
      ],
      section: [
        { id: 'cs101a', name: 'CS101-A', present: 28, total: 30, rate: 93.3, trend: 4.1, children: ['Web Dev', 'Database'] },
        { id: 'it201b', name: 'IT201-B', present: 25, total: 28, rate: 89.3, trend: 2.5, children: ['Networks', 'Security'] },
        { id: 'cs301a', name: 'CS301-A', present: 22, total: 27, rate: 81.5, trend: -1.8, children: ['Algorithms', 'AI'] },
        { id: 'it401c', name: 'IT401-C', present: 24, total: 25, rate: 96.0, trend: 5.2, children: ['Capstone', 'Internship'] }
      ],
      subject: [
        { id: 'webdev', name: 'Web Development', present: 67, total: 75, rate: 89.3, trend: 3.7, children: [] },
        { id: 'database', name: 'Database Systems', present: 58, total: 70, rate: 82.9, trend: 1.2, children: [] },
        { id: 'datastructures', name: 'Data Structures', present: 52, total: 60, rate: 86.7, trend: 2.8, children: [] },
        { id: 'networks', name: 'Networks', present: 45, total: 55, rate: 81.8, trend: -0.9, children: [] }
      ]
    };

    return baseData[tab as keyof typeof baseData] || [];
  };

  // Filter and sort analytics data
  const getFilteredAnalyticsData = () => {
    let data = getAnalyticsData(activeAnalyticsTab, analyticsTimeRange);
    
    // Filter by search query
    if (analyticsSearchQuery) {
      data = data.filter(item => 
        item.name.toLowerCase().includes(analyticsSearchQuery.toLowerCase())
      );
    }
    
    // Sort data
    data.sort((a, b) => {
      switch (analyticsSortBy) {
        case 'name':
          return a.name.localeCompare(b.name);
        case 'rate':
          return b.rate - a.rate;
        case 'total':
          return b.total - a.total;
        default:
          return b.rate - a.rate;
      }
    });
    
    return data;
  };

  // Get trend indicator component
  const TrendIndicator = ({ trend }: { trend: number }) => {
    const isPositive = trend > 0;
    const isNeutral = Math.abs(trend) < 0.5;
    
    return (
      <div className={`flex items-center gap-1 text-xs ${
        isNeutral ? 'text-gray-500' : 
        isPositive ? 'text-green-600' : 'text-red-600'
      }`}>
        {!isNeutral && (
          <TrendingUp className={`w-3 h-3 ${!isPositive ? 'rotate-180' : ''}`} />
        )}
        <span className="font-medium">
          {isNeutral ? '—' : `${isPositive ? '+' : ''}${trend.toFixed(1)}%`}
        </span>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#f8fafc] via-[#ffffff] to-[#f8fafc] p-0">
      <div className="container mx-auto p-6 space-y-6">
        {/* Main Navigation Header Card */}
        <Card className="bg-gradient-to-r from-[#1e40af] via-[#1e40af] to-[#3b82f6] rounded-3xl border-0 shadow-xl mb-8 relative overflow-hidden">
          <CardContent className="p-8 border-0">
          {/* Background Pattern */}
          <div className="absolute inset-0 opacity-10">
            <div className="absolute top-0 left-0 w-32 h-32 bg-white rounded-full -translate-x-16 -translate-y-16"></div>
            <div className="absolute bottom-0 right-0 w-24 h-24 bg-white rounded-full translate-x-12 translate-y-12"></div>
            <div className="absolute top-1/2 right-1/4 w-16 h-16 bg-white rounded-full opacity-50"></div>
          </div>
          
          {/* Enhanced Breadcrumb Navigation */}
          <nav className="flex items-center text-sm text-blue-200 mb-6 relative z-10">
            <div className="flex items-center gap-2 bg-blue-800/30 rounded-lg px-3 py-2 backdrop-blur-sm border border-blue-700/30">
              <Home className="h-4 w-4 text-blue-300" />
              <ChevronRight className="h-3 w-3 mx-1 text-blue-400" />
              <span className="text-blue-200">Dashboard</span>
              <ChevronRight className="h-3 w-3 mx-1 text-blue-400" />
              <span className="text-blue-200">Attendance</span>
              <ChevronRight className="h-3 w-3 mx-1 text-blue-400" />
              <span className="text-white font-medium bg-blue-600 px-2 py-1 rounded-md">Students</span>
            </div>
          </nav>

          {/* Enhanced Main Header */}
          <div className="flex flex-col xl:flex-row xl:items-start xl:justify-between gap-6 relative z-10">
            {/* Left Side - Title & Description */}
            <div className="flex-1">
              <div className="flex items-center gap-4 mb-4">
                <div>
                  <h1 className="text-4xl font-bold text-white mb-2 leading-tight">
                    Student Attendance Management
                  </h1>
                  <p className="text-blue-200 text-lg leading-relaxed">
                    Monitor and manage student attendance records with real-time insights and comprehensive analytics
                  </p>
                </div>
              </div>
            </div>
            

          </div>
          </CardContent>
        </Card>

        {/* Real-time Status Indicators Card */}
        {showRealTimeStatus && (
          <Card className="border border-blue-200 shadow-lg">
            <CardHeader className="bg-gradient-to-r from-emerald-500 to-emerald-600 text-white">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-white/20 rounded-lg flex items-center justify-center">
                  <Activity className="w-5 h-5 text-white" />
                </div>
                <div>
                  <CardTitle className="text-lg font-bold text-white">Real-time Status</CardTitle>
                  <p className="text-emerald-100 text-sm">Live monitoring and system status</p>
                </div>
              </div>
            </CardHeader>
            <CardContent className="p-6">
              <AttendanceStatusIndicators />
            </CardContent>
          </Card>
        )}

        {/* Parent Notification System Card */}
        {showNotificationSystem && (
          <Card className="border border-blue-200 shadow-lg">
            <CardHeader className="bg-gradient-to-r from-orange-500 to-orange-600 text-white">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-white/20 rounded-lg flex items-center justify-center">
                  <Bell className="w-5 h-5 text-white" />
                </div>
                <div>
                  <CardTitle className="text-lg font-bold text-white">Parent Notification System</CardTitle>
                  <p className="text-orange-100 text-sm">Automated alerts and communications</p>
                </div>
              </div>
            </CardHeader>
            <CardContent className="p-6">
              <ParentNotificationSystem />
            </CardContent>
          </Card>
        )}
      {/* Dashboard Section */}
      <div className="mb-8">
        {dashboardExpanded ? (
          <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
            
          {/* Enhanced Attendance Dashboard */}
            <div className="xl:col-span-2">
              <Card className="border border-blue-200 shadow-lg rounded-xl overflow-hidden h-fit xl:h-full">
            {/* Enhanced Header Section with Time Filters */}
        <div className="bg-gradient-to-r from-[#1e40af] to-[#3b82f6] px-6 py-4">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-white/20 rounded-lg flex items-center justify-center">
                <Activity className="w-5 h-5 text-white" />
              </div>
              <div>
                <h3 className="text-lg font-bold text-white mb-1">Live Attendance Dashboard</h3>
                <p className="text-blue-100 text-sm">Real-time monitoring and status tracking</p>
              </div>
            </div>
            
            <div className="flex items-center gap-3">
                  {/* Interactive Time Filters */}
                  <div className="flex items-center gap-2 bg-white/10 rounded-lg p-1">
                    <button className="px-3 py-1 bg-white/20 text-white rounded-md text-sm font-medium transition-all hover:bg-white/30">
                      Today
                    </button>
                    <button className="px-3 py-1 text-blue-100 rounded-md text-sm font-medium transition-all hover:bg-white/20">
                      Week
                    </button>
                    <button className="px-3 py-1 text-blue-100 rounded-md text-sm font-medium transition-all hover:bg-white/20">
                      Month
                    </button>
              </div>
                  
                  {/* Minimize Dashboard Button */}
                  <button
                    onClick={() => setDashboardExpanded(false)}
                    className="bg-white/20 hover:bg-white/30 text-white p-2 rounded-lg transition-all hover:scale-105"
                    title="Minimize dashboard"
                  >
                    <Minimize2 className="w-4 h-4" />
                  </button>
            </div>
          </div>
        </div>

                  {/* Content Section */}
          <div className="p-6 flex-1 flex flex-col">
              
            {/* Enhanced Status Cards with Mini Trends */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6 flex-shrink-0">
                {/* Present Students Card with Mini Chart */}
            <div className="bg-white rounded-xl p-4 border border-[#10b981]/20 shadow-sm hover:shadow-md transition-all duration-300 hover:border-[#10b981]/40 group relative overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-br from-[#10b981]/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div className="relative">
                <div className="flex items-center justify-between mb-3">
                  <div className="w-10 h-10 bg-gradient-to-br from-[#10b981] to-[#059669] rounded-lg flex items-center justify-center group-hover:scale-105 transition-transform duration-300 relative">
                    <Users className="h-5 w-5 text-white" />
                  </div>
                  <div className="text-right">
                    <div className="text-xl font-bold text-[#1e293b] flex items-center gap-1">
                      {totalPresent}
                      <div className="text-xs text-[#10b981] bg-[#10b981]/10 px-1.5 py-0.5 rounded flex items-center gap-1">
                        +2
                      </div>
                    </div>
                    <div className="text-xs text-[#10b981] font-medium">
                      {((totalPresent / (totalPresent + totalLate + totalAbsent)) * 100).toFixed(1)}% today
                    </div>
                  </div>
                </div>
                    
                    {/* Mini Trend Chart */}
                    <div className="mb-3 h-8">
                      <MiniTrendChart 
                        data={hourlyTrends.map(h => ({ value: h.present }))} 
                        color="#10b981" 
                        height={32}
                      />
                    </div>
                    
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium text-[#64748b]">Present Today</span>
                        <span className="text-xs text-[#10b981] font-medium">↗ +1.2%</span>
                  </div>
                  <div className="w-full bg-[#10b981]/10 rounded-full h-1.5 relative overflow-hidden">
                    <div 
                      className="bg-gradient-to-r from-[#10b981] to-[#059669] h-1.5 rounded-full transition-all duration-1000 ease-out relative" 
                      style={{ width: `${(totalPresent / (totalPresent + totalLate + totalAbsent)) * 100}%` }}
                    >
                      <div className="absolute inset-0 bg-white/30 rounded-full animate-pulse"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

                {/* Late Students Card with Mini Chart */}
            <div className="bg-white rounded-xl p-4 border border-[#f59e0b]/20 shadow-sm hover:shadow-md transition-all duration-300 hover:border-[#f59e0b]/40 group relative overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-br from-[#f59e0b]/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div className="relative">
                <div className="flex items-center justify-between mb-3">
                  <div className="w-10 h-10 bg-[#f59e0b] rounded-lg flex items-center justify-center group-hover:scale-105 transition-transform duration-300 relative">
                    <Clock className="h-5 w-5 text-white" />
                  </div>
                  <div className="text-right">
                    <div className="text-xl font-bold text-[#1e293b] flex items-center gap-1">
                      {totalLate}
                    </div>
                    <div className="text-xs text-[#f59e0b] font-medium">
                      {((totalLate / (totalPresent + totalLate + totalAbsent)) * 100).toFixed(1)}% today
                    </div>
                  </div>
                </div>
                    
                    {/* Mini Trend Chart */}
                    <div className="mb-3 h-8">
                      <MiniTrendChart 
                        data={hourlyTrends.map(h => ({ value: h.late }))} 
                        color="#f59e0b" 
                        height={32}
                      />
                    </div>
                    
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium text-[#64748b]">Late Arrivals</span>
                        <span className="text-xs text-[#f59e0b] font-medium">↘ -0.5%</span>
                  </div>
                  <div className="w-full bg-[#f59e0b]/10 rounded-full h-1.5 relative overflow-hidden">
                    <div 
                      className="bg-[#f59e0b] h-1.5 rounded-full transition-all duration-1000 ease-out" 
                      style={{ width: `${Math.max(5, (totalLate / (totalPresent + totalLate + totalAbsent)) * 100)}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            </div>

                {/* Absent Students Card with Mini Chart */}
            <div className="bg-white rounded-xl p-4 border border-[#ef4444]/20 shadow-sm hover:shadow-md transition-all duration-300 hover:border-[#ef4444]/40 group relative overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-br from-[#ef4444]/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div className="relative">
                <div className="flex items-center justify-between mb-3">
                  <div className="w-10 h-10 bg-[#ef4444] rounded-lg flex items-center justify-center group-hover:scale-105 transition-transform duration-300 relative">
                    <AlertCircle className="h-5 w-5 text-white" />
                  </div>
                  <div className="text-right">
                    <div className="text-xl font-bold text-[#1e293b] flex items-center gap-1">
                      {totalAbsent}
                    </div>
                    <div className="text-xs text-[#ef4444] font-medium">
                      {((totalAbsent / (totalPresent + totalLate + totalAbsent)) * 100).toFixed(1)}% today
                    </div>
                  </div>
                </div>
                    
                    {/* Mini Trend Chart */}
                    <div className="mb-3 h-8">
                      <MiniTrendChart 
                        data={hourlyTrends.map(h => ({ value: h.absent }))} 
                        color="#ef4444" 
                        height={32}
                      />
                    </div>
                    
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium text-[#64748b]">Absent Today</span>
                        <span className="text-xs text-[#ef4444] font-medium">↗ +0.8%</span>
                  </div>
                  <div className="w-full bg-[#ef4444]/10 rounded-full h-1.5 relative overflow-hidden">
                    <div 
                      className="bg-[#ef4444] h-1.5 rounded-full transition-all duration-1000 ease-out" 
                      style={{ width: `${Math.max(5, (totalAbsent / (totalPresent + totalLate + totalAbsent)) * 100)}%` }}
                    ></div>
                  </div>
                    </div>
                </div>
              </div>
            </div>

              {/* Simplified Department Breakdown with Dialog */}
              <div className="bg-white rounded-xl p-5 border border-gray-200 shadow-sm flex-1 flex flex-col">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center gap-2">
                      <BarChart3 className="w-5 h-5 text-blue-600" />
                      <h4 className="font-bold text-gray-900">Attendance Overview</h4>
                      <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" title="Live data"></div>
                    </div>
                    
                                      {/* View Details Dialog Trigger */}
                  <Dialog open={isAnalyticsDialogOpen} onOpenChange={setIsAnalyticsDialogOpen}>
                      <DialogTrigger asChild>
                        <button className="text-xs text-blue-600 hover:text-blue-800 font-medium bg-blue-50 hover:bg-blue-100 px-3 py-2 rounded-lg transition-all duration-200 flex items-center gap-1 hover:shadow-sm border border-blue-200">
                          <BarChart3 className="w-3 h-3" />
                          View Details
                        </button>
                      </DialogTrigger>
                      
                      {/* Full Analytics Dialog */}
                      <DialogContent className="max-w-6xl max-h-[90vh] p-0 overflow-hidden">
                        <DialogHeader className="bg-gradient-to-r from-blue-600 to-blue-700 text-white p-6 border-b">
                          <DialogTitle className="flex items-center gap-3 text-xl font-bold">
                            <div className="w-8 h-8 bg-white/20 rounded-lg flex items-center justify-center">
                              <BarChart3 className="w-5 h-5 text-white" />
                            </div>
                            Interactive Attendance Analytics
                            <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse ml-auto" title="Live data"></div>
                          </DialogTitle>
                          <p className="text-blue-100 text-sm mt-2">
                            Comprehensive analytics with real-time insights, trends, and drill-down capabilities
                          </p>
                        </DialogHeader>
                        
                        <div className="p-6 overflow-auto max-h-[calc(90vh-140px)]">
                          {/* Enhanced Header with Controls */}
                          <div className="flex flex-col gap-4 mb-6">
                            <div className="flex items-center justify-between">
                              <div className="flex items-center gap-2">
                                <h5 className="font-bold text-gray-900">Real-time Analytics Dashboard</h5>
                              </div>
                              <div className="flex items-center gap-2">
                                {/* Time Range Selector */}
                                <select
                                  value={analyticsTimeRange}
                                  onChange={(e) => setAnalyticsTimeRange(e.target.value)}
                                  className="text-xs border border-gray-300 rounded-md px-2 py-1 bg-white hover:border-blue-400 focus:border-blue-500 focus:outline-none transition-all"
                                >
                                  <option value="today">Today</option>
                                  <option value="week">This Week</option>
                                  <option value="month">This Month</option>
                                </select>
                                
                                {/* Trends Toggle */}
                                <button
                                  onClick={() => setShowTrends(!showTrends)}
                                  className={`text-xs px-2 py-1 rounded-md transition-all ${
                                    showTrends 
                                      ? 'bg-blue-100 text-blue-700 border border-blue-300' 
                                      : 'bg-gray-100 text-gray-600 border border-gray-300'
                                  }`}
                                >
                                  <TrendingUp className="w-3 h-3 inline mr-1" />
                                  Trends
                                </button>
                                
                                {/* Export Button */}
                                <button className="text-xs text-green-600 hover:text-green-800 font-medium bg-green-50 hover:bg-green-100 px-2 py-1 rounded-md transition-all border border-green-200">
                                  <Download className="w-3 h-3 inline mr-1" />
                                  Export
                                </button>
                              </div>
                            </div>

                            {/* Enhanced Search and Filter Controls */}
                            <div className="flex items-center gap-3">
                              {/* Analytics Search */}
                              <div className="relative flex-1">
                                <Search className="absolute left-2.5 top-1/2 transform -translate-y-1/2 text-gray-400 w-3.5 h-3.5" />
                                <input
                                  type="text"
                                  placeholder={`Search ${activeAnalyticsTab}s...`}
                                  value={analyticsSearchQuery}
                                  onChange={(e) => setAnalyticsSearchQuery(e.target.value)}
                                  className="w-full pl-8 pr-3 py-2 text-xs border border-gray-300 rounded-md bg-white hover:border-blue-400 focus:border-blue-500 focus:outline-none transition-all"
                                />
                                {analyticsSearchQuery && (
                                  <button
                                    onClick={() => setAnalyticsSearchQuery('')}
                                    className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                                  >
                                    <X className="w-3 h-3" />
                                  </button>
                                )}
                              </div>

                              {/* Sort Options */}
                              <select
                                value={analyticsSortBy}
                                onChange={(e) => setAnalyticsSortBy(e.target.value as 'name' | 'rate' | 'total')}
                                className="text-xs border border-gray-300 rounded-md px-2 py-2 bg-white hover:border-blue-400 focus:border-blue-500 focus:outline-none transition-all"
                              >
                                <option value="rate">Sort by Rate</option>
                                <option value="total">Sort by Total</option>
                                <option value="name">Sort by Name</option>
                              </select>

                              {/* Alert Threshold */}
                              <div className="flex items-center gap-1">
                                <AlertTriangle className="w-3 h-3 text-orange-500" />
                                <input
                                  type="number"
                                  value={thresholdAlert}
                                  onChange={(e) => setThresholdAlert(Number(e.target.value))}
                                  min="0"
                                  max="100"
                                  className="w-12 text-xs border border-gray-300 rounded px-1 py-1 text-center bg-white hover:border-blue-400 focus:border-blue-500 focus:outline-none transition-all"
                                />
                                <span className="text-xs text-gray-500">%</span>
                              </div>
                            </div>

                            {/* Breadcrumb for Drill-down */}
                            {drillDownPath.length > 0 && (
                              <div className="flex items-center gap-2 text-xs bg-blue-50 p-3 rounded-lg border border-blue-200">
                                <button
                                  onClick={() => setDrillDownPath([])}
                                  className="text-blue-600 hover:text-blue-800 flex items-center gap-1 bg-white px-2 py-1 rounded border border-blue-300 hover:border-blue-400 transition-all"
                                >
                                  <Home className="w-3 h-3" />
                                  Analytics
                                </button>
                                {drillDownPath.map((path, index) => (
                                  <div key={index} className="flex items-center gap-1">
                                    <ChevronRight className="w-3 h-3 text-blue-400" />
                                    <button
                                      onClick={() => setDrillDownPath(drillDownPath.slice(0, index + 1))}
                                      className="text-blue-600 hover:text-blue-800 bg-white px-2 py-1 rounded border border-blue-300 hover:border-blue-400 transition-all"
                                    >
                                      {path}
                                    </button>
                                  </div>
                                ))}
                              </div>
                            )}
                          </div>

                          {/* Tab Interface */}
                          <Tabs value={activeAnalyticsTab} onValueChange={setActiveAnalyticsTab} className="flex-1 flex flex-col">
                            <TabsList className="grid w-full grid-cols-5 mb-6 bg-gray-100 p-1 rounded-lg">
                              <TabsTrigger value="department" className="text-sm font-medium data-[state=active]:bg-white data-[state=active]:text-blue-700 data-[state=active]:shadow-sm transition-all">
                                <Building className="w-4 h-4 mr-2" />
                                Department
                              </TabsTrigger>
                              <TabsTrigger value="year" className="text-sm font-medium data-[state=active]:bg-white data-[state=active]:text-blue-700 data-[state=active]:shadow-sm transition-all">
                                <GraduationCap className="w-4 h-4 mr-2" />
                                Year Level
                              </TabsTrigger>
                              <TabsTrigger value="course" className="text-sm font-medium data-[state=active]:bg-white data-[state=active]:text-blue-700 data-[state=active]:shadow-sm transition-all">
                                <BookOpen className="w-4 h-4 mr-2" />
                                Course
                              </TabsTrigger>
                              <TabsTrigger value="section" className="text-sm font-medium data-[state=active]:bg-white data-[state=active]:text-blue-700 data-[state=active]:shadow-sm transition-all">
                                <Users className="w-4 h-4 mr-2" />
                                Section
                              </TabsTrigger>
                              <TabsTrigger value="subject" className="text-sm font-medium data-[state=active]:bg-white data-[state=active]:text-blue-700 data-[state=active]:shadow-sm transition-all">
                                <Target className="w-4 h-4 mr-2" />
                                Subject
                              </TabsTrigger>
                            </TabsList>

                            {/* Universal Content Renderer */}
                            {['department', 'year', 'course', 'section', 'subject'].map(tabValue => (
                              <TabsContent key={tabValue} value={tabValue} className="flex-1 space-y-3 data-[state=active]:animate-fade-in">
                                {getFilteredAnalyticsData().length === 0 ? (
                                  <div className="text-center py-12 text-gray-500">
                                    <Info className="w-12 h-12 mx-auto mb-4 text-gray-400" />
                                    <h3 className="text-lg font-semibold text-gray-700 mb-2">No {tabValue}s found</h3>
                                    <p className="text-sm">No {tabValue}s match your current search criteria</p>
                                  </div>
                                ) : (
                                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                                    {getFilteredAnalyticsData().map((item, index) => (
                                      <div 
                                        key={item.id} 
                                        className={`p-4 rounded-xl transition-all duration-200 cursor-pointer group hover:shadow-lg border-l-4 ${
                                          item.rate < thresholdAlert 
                                            ? 'border-red-400 bg-red-50 hover:bg-red-100' 
                                            : item.rate >= 90 
                                            ? 'border-green-400 bg-green-50 hover:bg-green-100' 
                                            : 'border-blue-400 bg-blue-50 hover:bg-blue-100'
                                        }`}
                                        onClick={() => {
                                          if (item.children.length > 0) {
                                            setDrillDownPath([...drillDownPath, item.name]);
                                          }
                                        }}
                                      >
                                        <div className="flex items-center justify-between mb-3">
                                          <div className="flex items-center gap-3">
                                            <h4 className="text-base font-semibold text-gray-900 group-hover:text-blue-700 transition-colors">
                                              {item.name}
                                            </h4>
                                            {item.children.length > 0 && (
                                              <ChevronRight className="w-4 h-4 text-gray-400 group-hover:text-blue-600 transition-colors" />
                                            )}
                                            {item.rate < thresholdAlert && (
                                              <div className="flex items-center gap-1 bg-red-100 text-red-700 px-2 py-1 rounded-full text-xs font-medium">
                                                <AlertTriangle className="w-3 h-3" />
                                                Alert
                                              </div>
                                            )}
                                          </div>
                                          <div className="flex items-center gap-3">
                                            {showTrends && <TrendIndicator trend={item.trend} />}
                                            <span className={`text-xl font-bold ${
                                              item.rate >= 90 ? 'text-green-600' :
                                              item.rate >= 80 ? 'text-yellow-600' : 'text-red-600'
                                            }`}>
                                              {item.rate}%
                                            </span>
                                          </div>
                                        </div>
                                        
                                        <div className="flex items-center gap-4 mb-3">
                                          <div className="flex-1 bg-gray-200 rounded-full h-3 relative overflow-hidden">
                                            <div 
                                              className={`h-3 rounded-full transition-all duration-700 ease-out relative ${
                                                item.rate >= 85 ? 'bg-gradient-to-r from-green-400 to-green-500' :
                                                item.rate >= 80 ? 'bg-gradient-to-r from-yellow-400 to-yellow-500' : 
                                                'bg-gradient-to-r from-red-400 to-red-500'
                                              }`}
                                              style={{ width: `${item.rate}%` }}
                                            >
                                              <div className="absolute inset-0 bg-white/20 rounded-full animate-pulse"></div>
                                            </div>
                                          </div>
                                          <span className="text-sm text-gray-600 font-medium min-w-[60px]">
                                            {item.present}/{item.total}
                                          </span>
                                        </div>
                                        
                                        {showTrends && (
                                          <div className="h-8 w-full">
                                            <MiniTrendChart 
                                              data={Array.from({length: 7}, (_, i) => ({
                                                value: item.rate + (Math.random() - 0.5) * 10
                                              }))}
                                              color={item.rate >= 85 ? '#10b981' : item.rate >= 80 ? '#f59e0b' : '#ef4444'}
                                              height={32}
                                            />
                                          </div>
                                        )}
                                      </div>
                                    ))}
                                  </div>
                                )}
                              </TabsContent>
                            ))}
                          </Tabs>

                          {/* Enhanced Footer with Actions */}
                          <div className="mt-6 pt-4 border-t border-gray-200 bg-gray-50 rounded-lg p-4">
                            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
                              <div className="text-sm text-gray-600">
                                <div className="flex items-center gap-4">
                                  <span>Showing <span className="font-semibold text-gray-900">{getFilteredAnalyticsData().length}</span> {activeAnalyticsTab}s</span>
                                  <span>•</span>
                                  <span>Updated <span className="font-semibold text-blue-700">{new Date().toLocaleTimeString()}</span></span>
                                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                                </div>
                              </div>
                              <div className="flex items-center gap-3">
                                <button className="text-sm text-blue-600 hover:text-blue-800 bg-blue-100 hover:bg-blue-200 px-3 py-2 rounded-lg transition-all flex items-center gap-2">
                                  <Download className="w-4 h-4" />
                                  Export Data
                                </button>
                                <button className="text-sm text-orange-600 hover:text-orange-800 bg-orange-100 hover:bg-orange-200 px-3 py-2 rounded-lg transition-all flex items-center gap-2">
                                  <Bell className="w-4 h-4" />
                                  Send Alerts
                                </button>
                                <button className="text-sm text-green-600 hover:text-green-800 bg-green-100 hover:bg-green-200 px-3 py-2 rounded-lg transition-all flex items-center gap-2">
                                  <RefreshCw className="w-4 h-4" />
                                  Refresh
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </DialogContent>
                    </Dialog>
                  </div>

                  {/* Simplified Department Overview */}
                  <div className="space-y-3 flex-1 flex flex-col justify-center">
                    {departmentBreakdown.map((dept, index) => (
                      <div key={dept.name} className="flex items-center justify-between p-3 hover:bg-gray-50 rounded-lg transition-colors group">
                        <div className="flex-1">
                          <div className="flex items-center justify-between mb-2">
                            <span className="text-sm font-medium text-gray-900 group-hover:text-blue-700 transition-colors">{dept.name}</span>
                            <span className={`text-sm font-bold ${
                              dept.rate >= 85 ? 'text-green-600' :
                              dept.rate >= 80 ? 'text-yellow-600' : 'text-red-600'
                            }`}>
                              {dept.rate}%
                            </span>
                          </div>
                          <div className="flex items-center gap-2">
                            <div className="flex-1 bg-gray-200 rounded-full h-2">
                              <div 
                                className={`h-2 rounded-full transition-all duration-500 ${
                                  dept.rate >= 85 ? 'bg-green-500' :
                                  dept.rate >= 80 ? 'bg-yellow-500' : 'bg-red-500'
                                }`}
                                style={{ width: `${dept.rate}%` }}
                              ></div>
                            </div>
                            <span className="text-xs text-gray-500 font-medium">{dept.present}/{dept.total}</span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  {/* Quick Summary Footer */}
                  <div className="mt-4 pt-3 border-t border-gray-200">
                    <div className="text-xs text-gray-500 text-center">
                      <span>4 departments tracked</span> • <span className="text-green-600 font-medium">2 performing well</span> • <span className="text-orange-600 font-medium">1 needs attention</span>
                    </div>
                  </div>
                </div>
              </div>
                </Card>
              </div>

              {/* Quick Actions Panel */}
              <div className="xl:col-span-1">
                <Card className="border border-blue-200 shadow-lg rounded-xl overflow-hidden h-fit">
                  {/* Quick Actions Header */}
                  <div className="bg-gradient-to-r from-[#059669] to-[#10b981] px-6 py-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 bg-white/20 rounded-lg flex items-center justify-center">
                          <Zap className="w-5 h-5 text-white" />
                        </div>
                        <div>
                          <h3 className="text-lg font-bold text-white mb-1">Quick Actions</h3>
                          <p className="text-green-100 text-sm">Essential tools and shortcuts</p>
                      </div>
                      </div>
                      
                      {/* Minimize Quick Actions Button */}
                      <button
                        onClick={() => setQuickActionsExpanded(!quickActionsExpanded)}
                        className="bg-white/20 hover:bg-white/30 text-white p-2 rounded-lg transition-all hover:scale-105"
                        title={quickActionsExpanded ? "Minimize quick actions" : "Expand quick actions"}
                      >
                        {quickActionsExpanded ? <Minimize2 className="w-4 h-4" /> : <Maximize2 className="w-4 h-4" />}
                      </button>
              </div>
            </div>

                  {/* Quick Actions Content */}
                  {quickActionsExpanded && (
                    <div className="p-6">
                      <div className="space-y-3">
                        {/* Auto Refresh */}
                        <button className="w-full flex items-center gap-3 p-4 bg-gradient-to-r from-blue-50 to-blue-100 hover:from-blue-100 hover:to-blue-200 rounded-xl border border-blue-200 transition-all duration-300 hover:shadow-md group">
                          <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center group-hover:scale-105 transition-transform">
                            <RefreshCw className="w-5 h-5 text-white" />
                    </div>
                          <div className="flex-1 text-left">
                            <div className="font-semibold text-blue-900">Auto Refresh</div>
                            <div className="text-xs text-blue-600">Toggle live updates</div>
                      </div>
                          <div className="w-12 h-6 bg-blue-300 rounded-full relative">
                            <div className="w-5 h-5 bg-white rounded-full absolute top-0.5 left-0.5 transition-transform transform translate-x-6"></div>
                    </div>
                        </button>

                        {/* Export Data */}
                        <button className="w-full flex items-center gap-3 p-4 bg-gradient-to-r from-purple-50 to-purple-100 hover:from-purple-100 hover:to-purple-200 rounded-xl border border-purple-200 transition-all duration-300 hover:shadow-md group">
                          <div className="w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center group-hover:scale-105 transition-transform">
                            <Download className="w-5 h-5 text-white" />
                  </div>
                          <div className="flex-1 text-left">
                            <div className="font-semibold text-purple-900">Export Data</div>
                            <div className="text-xs text-purple-600">Download reports</div>
                  </div>
                          <ChevronRight className="w-4 h-4 text-purple-600" />
                        </button>

                        {/* Send Notifications */}
                        <button className="w-full flex items-center gap-3 p-4 bg-gradient-to-r from-orange-50 to-orange-100 hover:from-orange-100 hover:to-orange-200 rounded-xl border border-orange-200 transition-all duration-300 hover:shadow-md group">
                          <div className="w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center group-hover:scale-105 transition-transform">
                            <Bell className="w-5 h-5 text-white" />
                </div>
                          <div className="flex-1 text-left">
                            <div className="font-semibold text-orange-900">Send Notifications</div>
                            <div className="text-xs text-orange-600">Alert parents/students</div>
                  </div>
                          <div className="w-2 h-2 bg-orange-500 rounded-full animate-pulse"></div>
                        </button>

                        {/* Generate Reports */}
                        <button className="w-full flex items-center gap-3 p-4 bg-gradient-to-r from-emerald-50 to-emerald-100 hover:from-emerald-100 hover:to-emerald-200 rounded-xl border border-emerald-200 transition-all duration-300 hover:shadow-md group">
                          <div className="w-10 h-10 bg-emerald-500 rounded-lg flex items-center justify-center group-hover:scale-105 transition-transform">
                            <FileText className="w-5 h-5 text-white" />
                </div>
                          <div className="flex-1 text-left">
                            <div className="font-semibold text-emerald-900">Generate Reports</div>
                            <div className="text-xs text-emerald-600">Custom analytics</div>
              </div>
                          <ChevronRight className="w-4 h-4 text-emerald-600" />
                        </button>

                        {/* Mark Attendance */}
                        <button className="w-full flex items-center gap-3 p-4 bg-gradient-to-r from-teal-50 to-teal-100 hover:from-teal-100 hover:to-teal-200 rounded-xl border border-teal-200 transition-all duration-300 hover:shadow-md group">
                          <div className="w-10 h-10 bg-teal-500 rounded-lg flex items-center justify-center group-hover:scale-105 transition-transform">
                            <CheckCircle className="w-5 h-5 text-white" />
                    </div>
                          <div className="flex-1 text-left">
                            <div className="font-semibold text-teal-900">Mark Attendance</div>
                            <div className="text-xs text-teal-600">Manual entry</div>
                      </div>
                          <ChevronRight className="w-4 h-4 text-teal-600" />
                        </button>

                        {/* System Settings */}
                        <button className="w-full flex items-center gap-3 p-4 bg-gradient-to-r from-gray-50 to-gray-100 hover:from-gray-100 hover:to-gray-200 rounded-xl border border-gray-200 transition-all duration-300 hover:shadow-md group">
                          <div className="w-10 h-10 bg-gray-500 rounded-lg flex items-center justify-center group-hover:scale-105 transition-transform">
                            <Settings className="w-5 h-5 text-white" />
                    </div>
                          <div className="flex-1 text-left">
                            <div className="font-semibold text-gray-900">System Settings</div>
                            <div className="text-xs text-gray-600">Configure attendance</div>
                  </div>
                          <ChevronRight className="w-4 h-4 text-gray-600" />
                        </button>
                  </div>

                      {/* Quick Stats Footer */}
                      <div className="mt-6 pt-4 border-t border-gray-200">
                        <div className="text-xs text-gray-500 text-center">
                          Last action: <span className="font-semibold text-gray-700">2 minutes ago</span>
                </div>
                  </div>
                </div>
                  )}
                </Card>
              </div>

            </div>
          ) : (
            /* Minimized Dashboard */
            <Card className="border border-blue-200 shadow-lg rounded-xl overflow-hidden">
              <div className="bg-gradient-to-r from-[#1e40af] to-[#3b82f6] px-6 py-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="w-6 h-6 bg-white/20 rounded-lg flex items-center justify-center">
                      <Activity className="w-4 h-4 text-white" />
                    </div>
                    <div>
                      <h3 className="font-bold text-white">Live Dashboard</h3>
                      <p className="text-blue-100 text-xs">Click to expand real-time insights</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-4">
                    {/* Quick Stats in Minimized View */}
                    <div className="flex items-center gap-4 text-white text-sm">
                      <div className="flex items-center gap-1">
                        <Users className="w-4 h-4" />
                        <span className="font-semibold">{totalPresent}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Clock className="w-4 h-4" />
                        <span className="font-semibold">{totalLate}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <AlertCircle className="w-4 h-4" />
                        <span className="font-semibold">{totalAbsent}</span>
                      </div>
                    </div>
                    
                    <button
                      onClick={() => setDashboardExpanded(true)}
                      className="bg-white/20 hover:bg-white/30 text-white p-2 rounded-lg transition-all hover:scale-105"
                      title="Expand dashboard"
                    >
                      <Maximize2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              </div>
            </Card>
          )}
              </div>
            </div>

        {/* Student Attendance Management - Unified Search & Report */}
        <div className="container mx-auto p-6 space-y-6">
          <div className="xl:col-span-3">
            <Card className="border border-blue-200 shadow-lg rounded-xl overflow-hidden">
              {/* Action Buttons in Top-Right */}
              <div className="absolute top-4 right-4 z-10 flex items-center gap-2">
                <Button
                  variant="ghost"
                  size="sm"
                  className="bg-white/90 text-blue-700 hover:bg-white border border-blue-100"
                  onClick={() => window.location.reload()}
                >
                  <RefreshCw className="w-4 h-4 mr-1" />
                  Refresh
                </Button>
                
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="bg-white/90 text-blue-700 hover:bg-white border border-blue-100"
                    >
                      <Download className="w-4 h-4 mr-1" />
                      Export
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-48 bg-white border border-blue-200 rounded-xl shadow-lg p-2">
                    <div className="space-y-1">
                      <button
                        onClick={handleExportCSV}
                        className="w-full text-left px-4 py-2.5 text-sm border border-transparent hover:border-blue-200 hover:bg-blue-50 rounded-lg flex items-center gap-3 text-blue-700 hover:text-blue-900 transition-all duration-300 cursor-pointer group hover:shadow-sm font-medium"
                      >
                        <FileText className="w-4 h-4 text-blue-600 group-hover:text-blue-800 transition-colors" />
                        <span className="group-hover:text-blue-900 transition-colors">Export as CSV</span>
                      </button>
                      <button
                        onClick={handleExportPDF}
                        className="w-full text-left px-4 py-2.5 text-sm border border-transparent hover:border-blue-200 hover:bg-blue-50 rounded-lg flex items-center gap-3 text-blue-700 hover:text-blue-900 transition-all duration-300 cursor-pointer group hover:shadow-sm font-medium"
                      >
                        <FileDown className="w-4 h-4 text-blue-600 group-hover:text-blue-800 transition-colors" />
                        <span className="group-hover:text-blue-900 transition-colors">Export as PDF</span>
                      </button>
                      <button
                        onClick={handlePrint}
                        className="w-full text-left px-4 py-2.5 text-sm border border-transparent hover:border-blue-200 hover:bg-blue-50 rounded-lg flex items-center gap-3 text-blue-700 hover:text-blue-900 transition-all duration-300 cursor-pointer group hover:shadow-sm font-medium"
                      >
                        <Printer className="w-4 h-4 text-blue-600 group-hover:text-blue-800 transition-colors" />
                        <span className="group-hover:text-blue-900 transition-colors">Print Report</span>
                      </button>
                    </div>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>

              {/* Integrated Search & Filter Section */}
              <div className="border-b border-blue-100">
                <SearchBar
                  searchQuery={searchQuery}
                  setSearchQuery={setSearchQuery}
                  departments={departments}
                  courses={courses}
                  yearLevels={yearLevels}
                  riskLevels={riskLevels}
                  studentStatuses={studentStatuses}
                  studentTypes={studentTypes}
                  sections={sections}
                  filters={filters}
                  setFilters={setFilters}
                  dateRange={dateRange}
                  setDateRange={setDateRange}
                  handleClearFilters={handleClearFilters}
                  expanded={searchFilterExpanded}
                  setExpanded={setSearchFilterExpanded}
                  activeFilterTab={activeFilterTab}
                  setActiveFilterTab={setActiveFilterTab}
                  recentSearches={recentSearches}
                  setRecentSearches={setRecentSearches}
                  handleSearchChange={handleSearchChange}
                  currentTime={currentTime}
                  mounted={mounted}
                />
              </div>

              {/* Content Section */}
              <div className="p-6">

          {/* Enhanced Bulk Actions Bar */}
          {selected.size > 0 && (
            <div className="sticky top-[64px] z-20 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-2xl shadow-xl mb-6 p-6 animate-fade-in border-2 border-blue-500">
              <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
                <div className="flex items-center gap-4">
                  <div className="w-3 h-3 bg-white rounded-full animate-pulse"></div>
                  <div>
                    <span className="font-bold text-xl">{selected.size} student{selected.size !== 1 ? 's' : ''} selected</span>
                    <div className="text-blue-100 text-sm mt-1">
                      Choose an action to apply to selected students
                    </div>
                  </div>
                </div>
                
                <div className="flex flex-wrap gap-3">
                  <Button
                    onClick={() => alert('Export selected students (stub)')}
                    className="bg-white text-blue-700 hover:bg-blue-50 shadow-sm font-medium"
                    size="sm"
                  >
                    <Download className="w-4 h-4 mr-2" />
                    Export Selected
                  </Button>
                  <Button
                    onClick={() => alert('Mark selected as excused (stub)')}
                    className="bg-green-500 text-white hover:bg-green-600 shadow-sm font-medium"
                    size="sm"
                  >
                    <CheckCircle className="w-4 h-4 mr-2" />
                    Mark Excused
                  </Button>
                  <Button
                    onClick={() => alert('Send notification to selected (stub)')}
                    className="bg-orange-500 text-white hover:bg-orange-600 shadow-sm font-medium"
                    size="sm"
                  >
                    <Send className="w-4 h-4 mr-2" />
                    Send Notice
                  </Button>
                  <Button
                    onClick={() => setSelected(new Set())}
                    variant="ghost"
                    className="text-blue-100 hover:bg-blue-600 hover:text-white"
                    size="sm"
                  >
                    <X className="w-4 h-4 mr-1" />
                    Clear
                  </Button>
                </div>
              </div>
            </div>
          )}

          {/* Enhanced Data Table Container */}
          <div className="overflow-hidden relative">
            <ReportList
              filteredStudents={paginatedStudents}
              getAttendanceRateColor={getAttendanceRateColor}
              loading={loading}
              sortBy={sortBy}
              setSortBy={setSortBy}
              selected={selected}
              setSelected={setSelected}
              allSelected={allSelected}
              onSelectAll={onSelectAll}
              expandedStudentId={expandedStudentId}
              setExpandedStudentId={setExpandedStudentId}
              onStudentClick={handleStudentClick}
            />
          </div>

          {/* Enhanced Pagination Controls */}
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-8 py-8 border-t border-blue-100 mt-8">
            {/* Left Side - Page Size & Info */}
            <div className="flex flex-col sm:flex-row sm:items-center gap-6">
              <div className="flex items-center gap-3">
                <span className="text-sm font-semibold text-blue-800 uppercase tracking-wide">Rows per page:</span>
                <select
                  value={pageSize}
                  onChange={e => {
                    setPageSize(Number(e.target.value));
                    setPage(1);
                  }}
                  className="border border-blue-300 rounded-lg px-3 py-2 text-sm font-medium focus:outline-none focus:ring-2 focus:ring-blue-500/30 focus:border-blue-500 bg-white hover:border-blue-400 transition-all duration-200 text-blue-900 cursor-pointer"
                >
                  <option value={25}>25 students</option>
                  <option value={50}>50 students</option>
                  <option value={100}>100 students</option>
                </select>
              </div>

              {/* Showing Info */}
              <div className="text-sm text-blue-700 bg-blue-50 px-3 py-2 rounded-lg border border-blue-200">
                Showing <span className="font-bold text-blue-900">{rangeStart}–{rangeEnd}</span> of <span className="font-bold text-blue-900">{sortedStudents.length}</span> students
              </div>
            </div>

            {/* Right Side - Navigation */}
            <div className="flex items-center justify-center lg:justify-end gap-2">
              <Button
                onClick={() => setPage(1)}
                disabled={page === 1}
                variant="outline"
                size="sm"
                className="border border-blue-300 text-blue-700 hover:bg-blue-50 hover:border-blue-400 disabled:opacity-40 disabled:cursor-not-allowed transition-all font-medium px-3 py-2"
              >
                <ChevronsLeft className="w-4 h-4" />
                <span className="hidden sm:inline ml-1">First</span>
              </Button>
              
              <Button
                onClick={() => setPage(p => Math.max(1, p - 1))}
                disabled={page === 1}
                variant="outline"
                size="sm"
                className="border border-blue-300 text-blue-700 hover:bg-blue-50 hover:border-blue-400 disabled:opacity-40 disabled:cursor-not-allowed transition-all font-medium px-3 py-2"
              >
                <ChevronLeft className="w-4 h-4" />
                <span className="hidden sm:inline ml-1">Prev</span>
              </Button>
              
              {/* Current Page Indicator */}
              <div className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg shadow-sm border border-blue-500">
                <span className="text-sm font-medium">Page</span>
                <span className="font-bold">{page}</span>
                <span className="text-blue-200">/</span>
                <span className="font-bold">{totalPages}</span>
              </div>
              
              <Button
                onClick={() => setPage(p => Math.min(totalPages, p + 1))}
                disabled={page === totalPages}
                variant="outline"
                size="sm"
                className="border border-blue-300 text-blue-700 hover:bg-blue-50 hover:border-blue-400 disabled:opacity-40 disabled:cursor-not-allowed transition-all font-medium px-3 py-2"
              >
                <span className="hidden sm:inline mr-1">Next</span>
                <ChevronRight className="w-4 h-4" />
              </Button>
              
              <Button
                onClick={() => setPage(totalPages)}
                disabled={page === totalPages}
                variant="outline"
                size="sm"
                className="border border-blue-300 text-blue-700 hover:bg-blue-50 hover:border-blue-400 disabled:opacity-40 disabled:cursor-not-allowed transition-all font-medium px-3 py-2"
              >
                <span className="hidden sm:inline mr-1">Last</span>
                <ChevronsRight className="w-4 h-4" />
              </Button>
            </div>
          </div>
          </div>
        </Card>
          </div>
        </div>

        {/* Student Detail Modal */}
        <StudentDetailModal
          student={selectedStudent}
          isOpen={isDetailModalOpen}
          onClose={() => setIsDetailModalOpen(false)}
          onUpdate={handleStudentUpdate}
          onSendNotification={handleSendNotification}
        />
      </div>
  )
}
